from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import psycopg2
from datetime import datetime, date, time, timedelta
import logging
import os
import re # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç re
from telegram.error import NetworkError, TelegramError # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# API-—Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
TOKEN = os.environ.get('TOKEN', '7991006616:AAEuHwhqbFyMVXTVy56ocv22JWZELf5kM7o')

# Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_IDS = ['5958122969'] # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–æ–∫, –¥–∞–∂–µ —Å –æ–¥–Ω–∏–º ID
# –ù–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤ (–û–ë–ù–û–í–õ–ï–ù–û —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–∏—Å–∫—É –ø–∞–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
LESSON_TITLES = [
    "1 —Å–∞–±–∞“õ. –û—Ä—Ç–∞–ª—ã“õ –ê–∑–∏—è –∂”ô–Ω–µ “∞–ª—ã –î–∞–ª–∞",
    "2 —Å–∞–±–∞“õ. “ö–∞–∑–∞“õ—Å—Ç–∞–Ω  —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è—Å—ã–Ω–¥–∞“ì—ã —Ç–∞—Å ,“õ–æ–ª–∞ –∂”ô–Ω–µ —Ç–µ–º—ñ—Ä –¥”ô—É—ñ—Ä–ª–µ—Ä—ñ",
    "3 —Å–∞–±–∞“õ. “ö–∞–∑–∞“õ—Å—Ç–∞–Ω —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è—Å—ã–Ω–¥–∞“ì—ã –∞–ª“ì–∞—à“õ—ã —Ç–∞–π–ø–∞–ª—ã“õ –æ–¥–∞“õ—Ç–∞—Ä –º–µ–Ω –µ—Ä—Ç–µ–¥–µ–≥—ñ –º–µ–º–ª–µ–∫–µ—Ç—Ç–µ—Ä",
    "4 —Å–∞–±–∞“õ. –ï—Ä—Ç–µ –æ—Ä—Ç–∞ “ì–∞—Å—ã—Ä–ª–∞—Ä–¥–∞“ì—ã “ö–∞–∑–∞“õ—Å—Ç–∞–Ω  —Ç–∞—Ä–∏—Ö—ã",
    "5 —Å–∞–±–∞“õ. VI-IX “ì–∞—Å—ã—Ä–ª–∞—Ä–¥–∞“ì—ã “ö–∞–∑–∞“õ—Å—Ç–∞–Ω  –º”ô–¥–µ–Ω–∏–µ—Ç—ñ",
    "6 —Å–∞–±–∞“õ. –î–∞–º—ã“ì–∞–Ω –æ—Ä—Ç–∞ “ì–∞—Å—ã—Ä–ª–∞—Ä –º–µ–º–ª–µ–∫–µ—Ç—Ç–µ—Ä—ñ–Ω—ñ“£ —Ç–∞—Ä–∏—Ö—ã",
    "7 —Å–∞–±–∞“õ. IX-XIII “ì–∞—Å—ã—Ä–ª–∞—Ä–¥–∞“ì—ã “ö–∞–∑–∞“õ—Å—Ç–∞–Ω  –º”ô–¥–µ–Ω–∏–µ—Ç—ñ",
    "8 —Å–∞–±–∞“õ. –ö–µ–π—ñ–Ω–≥—ñ –æ—Ä—Ç–∞ “ì–∞—Å—ã—Ä–ª–∞—Ä —Ç–∞—Ä–∏—Ö—ã.(XIII-XVII “ì–∞—Å—ã—Ä–ª–∞—Ä)",
    "9 —Å–∞–±–∞“õ. XIII-XV “ì–∞—Å—ã—Ä–¥—ã“£ –±—ñ—Ä—ñ–Ω—à—ñ –∂–∞—Ä—Ç—ã—Å—ã–Ω–¥–∞“ì—ã –º–µ–º–ª–µ–∫–µ—Ç—Ç–µ—Ä–¥—ñ“£ —Å–∞—è—Å–∏ “õ“±—Ä—ã–ª—ã–º—ã, —ç–∫–æ–Ω–æ–º–∏–∫–∞—Å—ã –∂”ô–Ω–µ –º”ô–¥–µ–Ω–∏–µ—Ç—ñ",
    "10 —Å–∞–±–∞“õ. –ë—ñ—Ä—Ç“±—Ç–∞—Å “ö–∞–∑–∞“õ –º–µ–º–ª–µ–∫–µ—Ç—ñ–Ω—ñ“£ “õ“±—Ä—ã–ª—É—ã",
    "11 —Å–∞–±–∞“õ. XV-XVII “ì–∞—Å—ã—Ä–ª–∞—Ä–¥–∞“ì—ã “ö–∞–∑–∞“õ —Ö–∞–Ω–¥—ã“ì—ã–Ω—ã“£ ”ô–ª–µ—É–º–µ—Ç—Ç—ñ–∫-—ç–∫–æ–Ω–æ–º–∏–∫–∞–ª—ã“õ –¥–∞–º—É—ã –∂”ô–Ω–µ –º”ô–¥–µ–Ω–∏–µ—Ç—ñ",
    "12 —Å–∞–±–∞“õ. “ö–∞–∑–∞“õ - –∂–æ“£“ì–∞—Ä —Å–æ“ì—ã—Å—Ç–∞—Ä—ã",
    "13 —Å–∞–±–∞“õ. XVIII “ì–∞—Å—ã—Ä–¥–∞“ì—ã “ö–∞–∑–∞“õ —Ö–∞–Ω–¥—ã“ì—ã",
    "14 —Å–∞–±–∞“õ. XVIII “ì–∞—Å—ã—Ä–¥–∞“ì—ã “ö–∞–∑–∞“õ—Å—Ç–∞–Ω  –º”ô–¥–µ–Ω–∏–µ—Ç—ñ",
    "15 —Å–∞–±–∞“õ. –û—Ç–∞—Ä–ª–∞—É –∂”ô–Ω–µ “±–ª—Ç-–∞–∑–∞—Ç—Ç—ã“õ –∫“Ø—Ä–µ—Å",
    "16 —Å–∞–±–∞“õ. “ö–∞–∑–∞“õ—Å—Ç–∞–Ω –†–µ—Å–µ–π –∏–º–ø–µ—Ä–∏—è—Å—ã–Ω—ã“£ “õ“±—Ä–∞–º—ã–Ω–¥–∞",
    "17 —Å–∞–±–∞“õ. “ö–∞–∑–∞“õ—Å—Ç–∞–Ω–Ω—ã“£ XIX-XX “ì–∞—Å—ã—Ä –±–∞—Å—ã–Ω–¥–∞“ì—ã –º”ô–¥–µ–Ω–∏–µ—Ç—ñ",
    "18 —Å–∞–±–∞“õ. XX “ì–∞—Å—ã—Ä–¥—ã“£ –±–∞—Å—ã–Ω–¥–∞“ì—ã “ö–∞–∑–∞“õ—Å—Ç–∞–Ω",
    "19 —Å–∞–±–∞“õ. “ö–∞–∑–∞“õ—Å—Ç–∞–Ω–¥–∞ –ö–µ“£–µ—Å –±–∏–ª—ñ–≥—ñ–Ω—ñ“£ –æ—Ä–Ω–∞—É—ã",
    "20 —Å–∞–±–∞“õ. “ö–∞–∑–∞“õ—Å—Ç–∞–Ω  —Ç–æ—Ç–∞–ª–∏—Ç–∞—Ä–ª—ã“õ –∂“Ø–π–µ –∫–µ–∑–µ“£—ñ–Ω–¥–µ",
    "21 —Å–∞–±–∞“õ. –ö–µ“£–µ—Å—Ç—ñ–∫ “ö–∞–∑–∞“õ—Å—Ç–∞–Ω–Ω—ã“£ –º”ô–¥–µ–Ω–∏–µ—Ç—ñ (1920-1930 –∂—ã–ª–¥–∞—Ä)",
    "22 —Å–∞–±–∞“õ. “ö–∞–∑–∞“õ—Å—Ç–∞–Ω “∞–ª—ã –û—Ç–∞–Ω —Å–æ“ì—ã—Å—ã –∂—ã–ª–¥–∞—Ä—ã–Ω–¥–∞.(1941-1945 –∂—ã–ª–¥–∞—Ä)",
    "23 —Å–∞–±–∞“õ. “ö–∞–∑–∞“õ—Å—Ç–∞–Ω —Å–æ“ì—ã—Å—Ç–∞–Ω –∫–µ–π—ñ–Ω–≥—ñ –∂—ã–ª–¥–∞—Ä–¥–∞ (1946-1953 –∂—ã–ª–¥–∞—Ä)",
    "24 —Å–∞–±–∞“õ. “ö–∞–∑–∞“õ—Å—Ç–∞–Ω –∂—ã–ª—ã–º—ã“õ –∫–µ–∑–µ“£—ñ–Ω–¥–µ .(1954-1964 –∂—ã–ª–¥–∞—Ä)",
    "25 —Å–∞–±–∞“õ. “ö–∞–∑–∞“õ—Å—Ç–∞–Ω —Ç–æ“õ—ã—Ä–∞—É –∫–µ–∑–µ“£—ñ–Ω–¥–µ. (1965-1985 –∂—ã–ª–¥–∞—Ä)",
    "26 —Å–∞–±–∞“õ. –ö–µ“£–µ—Å—Ç—ñ–∫ “ö–∞–∑–∞“õ—Å—Ç–∞–Ω –º”ô–¥–µ–Ω–∏–µ—Ç—ñ. (1946-1985 –∂—ã–ª–¥–∞—Ä)",
    "27 —Å–∞–±–∞“õ. “ö–∞–∑–∞“õ—Å—Ç–∞–Ω “õ–∞–π—Ç–∞ “õ“±—Ä—É –∫–µ–∑–µ“£—ñ–Ω–¥–µ. (1986 - 1991 –∂—ã–ª–¥–∞—Ä)",
    "28 —Å–∞–±–∞“õ. “ö–∞–∑–∞“õ—Å—Ç–∞–Ω –º–µ–º–ª–µ–∫–µ—Ç—Ç—ñ–ª—ñ–≥—ñ–Ω—ñ“£ “õ–∞–π—Ç–∞ –∂–∞“£“ì—ã—Ä—É—ã . (1991- 1996 –∂—ã–ª–¥–∞—Ä)",
    "29 —Å–∞–±–∞“õ. “ö–∞–∑–∞“õ—Å—Ç–∞–Ω –†–µ—Å–ø—É–±–ª–∏–∫–∞—Å—ã–Ω—ã“£ –¥–∞–º—É—ã. (1997 –∂—ã–ª–¥–∞–Ω –±–∞—Å—Ç–∞–ø “õ–∞–∑—ñ—Ä–≥—ñ –∫“Ø–Ω–≥–µ –¥–µ–π—ñ–Ω)",
    "30 —Å–∞–±–∞“õ. “ö–∞–∑—ñ—Ä–≥—ñ –∑–∞–º–∞–Ω“ì—ã “ö–∞–∑–∞“õ—Å—Ç–∞–Ω –º”ô–¥–µ–Ω–∏–µ—Ç—ñ"
]

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
conn = psycopg2.connect(
    dbname=os.environ.get('DB_NAME', 'bot'),
    user=os.environ.get('DB_USER', 'postgres'),
    password=os.environ.get('DB_PASSWORD', 'admin'),
    host=os.environ.get('DB_HOST', 'localhost'),
    port=os.environ.get('DB_PORT', '5432')
)
cur = conn.cursor()

# –î–æ–±–∞–≤–ª—è—é –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è file_id –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
VIDEO_FILE_ID = None

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Å–ª–æ–≤–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
def extract_number_prefix(filename):
    # –ò—â–µ–º –æ–¥–Ω—É –∏–ª–∏ –±–æ–ª–µ–µ —Ü–∏—Ñ—Ä –≤ –Ω–∞—á–∞–ª–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞, –≤–æ–∑–º–æ–∂–Ω–æ, —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –¥–æ –Ω–∏—Ö
    match = re.match(r"^\\s*(\\d+)", filename)
    if match:
        return int(match.group(1))
    # –ï—Å–ª–∏ —á–∏—Å–ª–æ–≤–æ–π –ø—Ä–µ—Ñ–∏–∫—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ñ–∞–π–ª –±—É–¥–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ–Ω–µ—Ü
    # –∏–ª–∏ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –ø–æ—Å–ª–µ —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    return float('inf')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ file_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def load_video_file_id():
    global VIDEO_FILE_ID
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        cur.execute("SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'settings')")
        table_exists = cur.fetchone()[0]

        if not table_exists:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            cur.execute("CREATE TABLE settings (key TEXT PRIMARY KEY, value TEXT)")
            conn.commit()
            logger.info("Created settings table")

        # –ü–æ–ª—É—á–∞–µ–º file_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cur.execute("SELECT value FROM settings WHERE key = 'video_file_id'")
        result = cur.fetchone()

        if result:
            VIDEO_FILE_ID = result[0]
            logger.info(f"Loaded video file_id from database: {VIDEO_FILE_ID}")
    except Exception as e:
        logger.error(f"Error loading video file_id from database: {e}")
        conn.rollback()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è file_id –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def save_video_file_id(file_id):
    try:
        cur.execute(
            "INSERT INTO settings (key, value) VALUES (%s, %s) ON CONFLICT (key) DO UPDATE SET value = %s",
            ('video_file_id', file_id, file_id)
        )
        conn.commit()
        logger.info(f"Saved video file_id to database: {file_id}")
    except Exception as e:
        logger.error(f"Error saving video file_id to database: {e}")
        conn.rollback()

# –ù–æ–≤–∞—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É—Ä–æ–∫–æ–≤
def create_lesson_keyboard():
    keyboard_lessons = []
    if not LESSON_TITLES:
        return InlineKeyboardMarkup(keyboard_lessons) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–π

    # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞
    max_len = 0
    for title in LESSON_TITLES:
        if len(title) > max_len:
            max_len = len(title)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏, –¥–æ–ø–æ–ª–Ω—è—è –∫–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–±–µ–ª–∞–º–∏
    for i, title in enumerate(LESSON_TITLES, 1):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ljust –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é, –¥–æ–±–∞–≤–ª—è—è –ø—Ä–æ–±–µ–ª—ã —Å–ø—Ä–∞–≤–∞
        # –ù–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ max_len
        formatted_title = title.ljust(max_len) 
        keyboard_lessons.append([InlineKeyboardButton(formatted_title, callback_data=f'lesson_{i}')])
    
    return InlineKeyboardMarkup(keyboard_lessons)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("”ô—Ä—ñ “õ–∞—Ä–∞–π", callback_data='next')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        await update.message.reply_text(
            "\"–¢–∞—Ä–∏—Ö—à—ã –ù“±—Ä—Å“±–ª—Ç–∞–Ω\" Telegram –∫–∞–Ω–∞–ª—ã–Ω–∞ “õ–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑! üìö",
            reply_markup=reply_markup,
            protect_content=True
        )
    except NetworkError as e:
        logger.error(f"Network error in start handler sending welcome message: {e}", exc_info=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ"
async def next_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    logger.info(f"Next_step handler called with query.data: {query.data}")
    await query.answer()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
    try:
        with open('photo.png', 'rb') as photo_file:
            await context.bot.send_photo(
                chat_id=query.from_user.id,
                photo=photo_file,
                protect_content=True
            )
    except FileNotFoundError:
        logger.error("Photo file not found: photo.png")
        try:
            await context.bot.send_message(
                chat_id=query.from_user.id,
                text="–§–æ—Ç–æ —Ñ–∞–π–ª—ã —Ç–∞–±—ã–ª–º–∞–¥—ã. ”ò–∫—ñ–º—à—ñ–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑.",
                protect_content=True
            )
        except NetworkError as e:
            logger.error(f"Network error in next_step handler sending photo not found error: {e}", exc_info=True)
    except NetworkError as e:
        logger.error(f"Network error sending photo in next_step handler: {e}", exc_info=True)
        # Optionally, inform user if photo sending failed due to network, though it might also fail
        try:
            await context.bot.send_message(
                chat_id=query.from_user.id,
                text="–§–æ—Ç–æ–Ω—ã –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ –∂–µ–ª—ñ “õ–∞—Ç–µ—Å—ñ –æ—Ä—ã–Ω –∞–ª–¥—ã.",
                protect_content=True
            )
        except NetworkError as ne_inner:
            logger.error(f"Network error in next_step handler sending photo network error message: {ne_inner}", exc_info=True)
    except Exception as e:
        logger.error(f"Error sending photo in next_step handler: {e}", exc_info=True)
        try:
            await context.bot.send_message(
                chat_id=query.from_user.id,
                text="–§–æ—Ç–æ–Ω—ã –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã.",
                protect_content=True
            )
        except NetworkError as ne_generic_error:
                 logger.error(f"Network error sending generic photo error message: {ne_generic_error}", exc_info=True)
    
    # –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ–± –∞–≤—Ç–æ—Ä–µ —Å –∫–Ω–æ–ø–∫–æ–π "start"
    keyboard = [[InlineKeyboardButton("start", callback_data='start')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    author_text = (
        "–¢”ô–∂–µ–Ω –ù“±—Ä—Å“±–ª—Ç–∞–Ω –®”ô—É—Ç–µ–Ω“±–ª—ã\n\n"
        "“ö—ã—Ä—ã“õ –∂—ã–ª“ì–∞ –∂—É—ã“õ –µ“£–±–µ–∫ ”©—Ç—ñ–ª—ñ –±–∞—Ä –ü–µ–¥–∞–≥–æ–≥-—à–µ–±–µ—Ä, “ö–† \"–ë—ñ–ª—ñ–º –±–µ—Ä—É —ñ—Å—ñ–Ω—ñ“£ “Ø–∑–¥—ñ–≥—ñ\", "
        "\"–´. –ê–ª—Ç—ã–Ω—Å–∞—Ä–∏–Ω —Ç”©—Å–±–µ–ª–≥—ñ—Å—ñ–Ω—ñ“£\" –∏–µ–≥–µ—Ä—ñ, “ö–∞–∑–∞“õ—Å—Ç–∞–Ω —Ç–∞—Ä–∏—Ö—ã –ø”ô–Ω—ñ –±–æ–π—ã–Ω—à–∞ "
        "–±—ñ—Ä–Ω–µ—à–µ ”ô–¥—ñ—Å—Ç–µ–º–µ–ª—ñ–∫ “õ“±—Ä–∞–ª–¥–∞—Ä–¥—ã“£ –∞–≤—Ç–æ—Ä—ã."
    )
    
    try:
        await context.bot.send_message(
            chat_id=query.from_user.id,
            text=author_text,
            reply_markup=reply_markup,
            protect_content=True
        )
    except NetworkError as e:
        logger.error(f"Network error in next_step handler sending author text: {e}", exc_info=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ä—Ç"
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    logger.info(f"Button handler called with query.data: {query.data}")
    await query.answer()
    if query.data == 'start':
        keyboard = [[InlineKeyboardButton("–°–∞–±–∞“õ—Ç–∞—Ä“ì–∞ “õ–æ–ª –∂–µ—Ç–∫—ñ–∑–≥—ñ–º –∫–µ–ª–µ–¥—ñ!", callback_data='get_access')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        global VIDEO_FILE_ID
        video_path = 'video.mp4'  # –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É –≤–∏–¥–µ–æ —Ñ–∞–π–ª—É

        try:
            # –ï—Å–ª–∏ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å file_id –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if VIDEO_FILE_ID:
                logger.info(f"Using cached video file_id: {VIDEO_FILE_ID}")
                await context.bot.send_video(
                    chat_id=query.from_user.id,
                    video=VIDEO_FILE_ID,
                    caption=None,  # –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏
                    reply_markup=reply_markup,
                    read_timeout=120,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
                    write_timeout=120,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
                    connect_timeout=120,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
                    protect_content=True
                )
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –¥–∏—Å–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º file_id –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                with open(video_path, 'rb') as video_file:
                    message = await context.bot.send_video(
                        chat_id=query.from_user.id,
                        video=video_file,
                        caption=None,  # –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏
                        reply_markup=reply_markup,
                        read_timeout=120,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
                        write_timeout=120,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
                        connect_timeout=120,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
                        protect_content=True
                    )
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                    VIDEO_FILE_ID = message.video.file_id
                    logger.info(f"Saved video file_id: {VIDEO_FILE_ID}")
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    save_video_file_id(VIDEO_FILE_ID)
        except FileNotFoundError:
            logger.error(f"Video file not found: {video_path}")
            try:
                await context.bot.send_message(
                    chat_id=query.from_user.id,
                    text="–í–∏–¥–µ–æ —Ñ–∞–π–ª—ã —Ç–∞–±—ã–ª–º–∞–¥—ã. ”ò–∫—ñ–º—à—ñ–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑.",
                    reply_markup=reply_markup,
                    protect_content=True
                )
            except NetworkError as e_fnf:
                logger.error(f"Network error sending video not found message: {e_fnf}", exc_info=True)
        except NetworkError as e_net:
            logger.error(f"Network error sending video in button handler: {e_net}", exc_info=True)
            try:
                await context.bot.send_message(
                    chat_id=query.from_user.id,
                    text="–í–∏–¥–µ–æ–Ω—ã –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ –∂–µ–ª—ñ “õ–∞—Ç–µ—Å—ñ –æ—Ä—ã–Ω –∞–ª–¥—ã. –°—ñ–∑–≥–µ –±”ô—Ä—ñ–±—ñ—Ä –∂–∞–ª“ì–∞—Å—Ç—ã—Ä—É“ì–∞ –º“Ø–º–∫—ñ–Ω–¥—ñ–∫ –±–µ—Ä–µ–º—ñ–∑.",
                    reply_markup=reply_markup,
                    protect_content=True
                )
            except NetworkError as e_net_fallback:
                logger.error(f"Network error sending video fallback message: {e_net_fallback}", exc_info=True)
        except Exception as e:
            logger.error(f"Error sending video in button handler: {e}", exc_info=True)
            try:
                await context.bot.send_message(
                    chat_id=query.from_user.id,
                    text="–í–∏–¥–µ–æ–Ω—ã –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã. –°—ñ–∑–≥–µ –±”ô—Ä—ñ–±—ñ—Ä –∂–∞–ª“ì–∞—Å—Ç—ã—Ä—É“ì–∞ –º“Ø–º–∫—ñ–Ω–¥—ñ–∫ –±–µ—Ä–µ–º—ñ–∑.",
                    reply_markup=reply_markup,
                    protect_content=True
                )
            except NetworkError as e_generic_fallback:
                 logger.error(f"Network error sending video generic fallback message: {e_generic_fallback}", exc_info=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–∞–±–∞“õ—Ç–∞—Ä“ì–∞ “õ–æ–ª –∂–µ—Ç–∫—ñ–∑–≥—ñ–º –∫–µ–ª–µ–¥—ñ!"
async def get_access(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    logger.info(f"Get_access handler called with query.data: {query.data}")
    await query.answer()
    if query.data == 'get_access':
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Kaspi Pay
        keyboard = [[InlineKeyboardButton("–¢”©–ª–µ–º –∂–∞—Å–∞—É", url='https://pay.kaspi.kz/pay/2tyi0ezv')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await query.message.reply_text(
        "üí∞ –ö—É—Ä—Å —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç:\n\n"
        "–ê—É–¥–∏–æ —Å–∞–±–∞“õ—Ç–∞—Ä–¥—ã –ø–∞–π–¥–∞–ª–∞–Ω—É –º–µ—Ä–∑—ñ–º—ñ - 12 –∞–π.\n"
        "–ë–∞“ì–∞—Å—ã - 48 000 —Ç–µ“£–≥–µ.\n"
        "–û—Å—ã —Ç”©–ª–µ–º–¥—ñ —Ç”©–ª–µ–ø, –∫–∞–Ω–∞–ª“ì–∞ “õ–æ—Å—ã–ª—ã“£—ã–∑.\n\n"
        "–ö–∞–Ω–∞–ª“ì–∞ “õ–æ—Å—ã–ª—É —Å—ñ–∑–≥–µ 12 –∞–π –±–æ–π—ã –¢”ô–∂–µ–Ω –ù“±—Ä—Å“±–ª—Ç–∞–Ω–Ω—ã“£ “ö–∞–∑–∞“õ—Å—Ç–∞–Ω —Ç–∞—Ä–∏—Ö—ã –ø”ô–Ω—ñ–Ω–µ–Ω "
        "124 —Ç–∞“õ—ã—Ä—ã–ø—Ç—ã “õ–∞–º—Ç–∏—Ç—ã–Ω –∞–≤—Ç–æ—Ä–ª—ã“õ –∞—É–¥–∏–æ —Å–∞–±–∞“õ—Ç–∞—Ä—ã–Ω —Ç—ã“£–¥–∞—É“ì–∞ –º“Ø–º–∫—ñ–Ω–¥—ñ–∫ –±–µ—Ä–µ–¥—ñ!\n\n"
        "–ß–µ–∫—Ç—ñ –∞—à—ã–ø —Å–∫—Ä–∏–Ω –∂—ñ–±–µ—Ä—ñ“£—ñ–∑ –∂”ô–Ω–µ “õ–æ—Å—ã–ª—É–¥—ã –∫“Ø—Ç—ñ“£—ñ–∑!",
        reply_markup=reply_markup,
        protect_content=True
    )
        except NetworkError as e:
            logger.error(f"Network error in get_access sending course info: {e}", exc_info=True)
        
        try:
            # –°–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
            await query.message.reply_text(
                "–ß–µ–∫—Ç—ñ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑ –∂”ô–Ω–µ “õ–æ—Å—ã–ª—É–¥—ã –∫“Ø—Ç—ñ“£—ñ–∑!",
                protect_content=True
            )
        except NetworkError as e:
            logger.error(f"Network error in get_access sending check prompt: {e}", exc_info=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞
async def handle_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    user_name = user.full_name

    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cur.execute("SELECT status, expiry_date FROM users WHERE user_id = %s", (user_id,))
        user_data = cur.fetchone()
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, —Å—Ç–∞—Ç—É—Å 'approved' –∏ —Å—Ä–æ–∫ –Ω–µ –∏—Å—Ç–µ–∫
        if user_data and user_data[0] == 'approved' and user_data[1]:
            expiry_dt = user_data[1] 
            if isinstance(expiry_dt, date) and not isinstance(expiry_dt, datetime):
                expiry_dt = datetime.combine(expiry_dt, time.min)
            
            if expiry_dt > datetime.now():
                logger.info(f"User {user_id} ('{user_name}') already has approved status with valid expiry date.")
                reply_markup = create_lesson_keyboard()
                try:
                    await update.message.reply_text(
                        f"–°—ñ–∑–¥–µ —Å–∞–±–∞“õ—Ç–∞—Ä“ì–∞ “õ–æ–ª –∂–µ—Ç–∫—ñ–∑—É –∞—à—ã“õ! –ú–µ—Ä–∑—ñ–º—ñ: {user_data[1].strftime('%d.%m.%Y')}. –¢”©–º–µ–Ω–¥–µ–≥—ñ —Å–∞–±–∞“õ—Ç–∞—Ä–¥—ã —Ç–∞“£–¥–∞“£—ã–∑:",
                        reply_markup=reply_markup,
                        protect_content=True
                    )
                except NetworkError as e:
                    logger.error(f"Network error sending already approved message: {e}", exc_info=True)

                # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –≤ –∫–æ–Ω—Ü–µ
                if update.message.text:
                    try:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text="üìû ”ò–∫—ñ–º—à—ñ–≥–µ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É “Ø—à—ñ–Ω –∫–æ–º–∞–Ω–¥–∞–Ω—ã –∫–µ–ª–µ—Å—ñ —Ç“Ø—Ä–¥–µ –ø–∞–π–¥–∞–ª–∞–Ω—ã“£—ã–∑:\n\n"
                                 "üî∏ /admin_khabar –°—ñ–∑–¥—ñ“£ —Ö–∞–±–∞—Ä–ª–∞–º–∞“£—ã–∑\n\n"
                                 "üìù –ú—ã—Å–∞–ª:\n"
                                 "/admin_khabar –°–∞–±–∞“õ—Ç–∞—Ä –∞—à—ã–ª–º–∞–π —Ç“±—Ä\n\n"
                                 "‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –º–µ–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã“£ –∞—Ä–∞—Å—ã–Ω–¥–∞ –±–æ—Å –æ—Ä—ã–Ω “õ–∞–ª–¥—ã—Ä—ã“£—ã–∑!",
                            protect_content=True
                        )
                    except NetworkError as e:
                        logger.error(f"Network error sending admin contact info to approved user: {e}", exc_info=True)

                return
        
        logger.info(f"Inserting/updating user {user_id} ('{user_name}') with status 'pending' in handle_payment.")
        cur.execute(
            "INSERT INTO users (user_id, username, status) VALUES (%s, %s, %s) ON CONFLICT (user_id) DO UPDATE SET username = %s, status = %s",
            (user_id, user_name, 'pending', user_name, 'pending')
        )
        conn.commit()
        logger.info(f"User {user_id} ('{user_name}') data saved/updated with status 'pending'.")
    except psycopg2.Error as e_db:
        logger.error(f"Database error in handle_payment for user {user_id} ('{user_name}'): {e_db}", exc_info=True)
        conn.rollback()
        try:
            await update.message.reply_text("–ß–µ–∫—Ç—ñ —Å–∞“õ—Ç–∞—É –∫–µ–∑—ñ–Ω–¥–µ –¥–µ—Ä–µ–∫“õ–æ—Ä “õ–∞—Ç–µ—Å—ñ –æ—Ä—ã–Ω –∞–ª–¥—ã. ”ò–∫—ñ–º—à—ñ–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑.", protect_content=True)
        except NetworkError as e_net:
            logger.error(f"Network error sending DB error message in handle_payment: {e_net}", exc_info=True)
        return
    except Exception as e_generic:
        logger.error(f"Unexpected error in handle_payment (DB part) for user {user_id} ('{user_name}'): {e_generic}", exc_info=True)
        try:
            await update.message.reply_text("–ß–µ–∫—Ç—ñ ”©“£–¥–µ—É –∫–µ–∑—ñ–Ω–¥–µ –±–µ–ª–≥—ñ—Å—ñ–∑ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã.", protect_content=True)
        except NetworkError as e_net:
            logger.error(f"Network error sending generic error message in handle_payment: {e_net}", exc_info=True)
        return

    keyboard = [
        [InlineKeyboardButton("–†–∞—Å—Ç–∞—É", callback_data=f'approve_{user_id}'),
         InlineKeyboardButton("“ö–∞–±—ã–ª–¥–∞–º–∞—É", callback_data=f'reject_{user_id}')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    for admin_user_id in ADMIN_IDS:
        try:
            if update.message.photo:
                await context.bot.send_photo(
                    chat_id=admin_user_id,
                    photo=update.message.photo[-1].file_id,
                    caption=f"–ñ–∞“£–∞ —á–µ–∫: ID: {user_id}, –ê—Ç—ã: {user_name}",
                    reply_markup=reply_markup,
                    protect_content=True
                )
            elif update.message.document and update.message.document.mime_type == 'application/pdf':
                await context.bot.send_document(
                    chat_id=admin_user_id,
                    document=update.message.document.file_id,
                    caption=f"–ñ–∞“£–∞ PDF —á–µ–∫: ID: {user_id}, –ê—Ç—ã: {user_name}",
                    reply_markup=reply_markup,
                    protect_content=True
                )
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —á–µ–∫
                if update.message.text:
                    logger.info(f"User {user_id} sent text message instead of photo/PDF: {update.message.text}")
                    try:
                        await update.message.reply_text(
                            "‚ö†Ô∏è –°—ñ–∑ —Ç–µ–∫ —Å—É—Ä–µ—Ç –Ω–µ–º–µ—Å–µ PDF —Ñ–∞–π–ª –∂—ñ–±–µ—Ä–µ –∞–ª–∞—Å—ã–∑!\n\n"
                            "üìû –ï–≥–µ—Ä —Å—ñ–∑–≥–µ –∫”©–º–µ–∫ –∫–µ—Ä–µ–∫ –±–æ–ª—Å–∞, “õ–æ–ª–¥–∞–Ω—ã“£—ã–∑:\n"
                            "üî∏ /admin_khabar —Å—ñ–∑–¥—ñ“£ —Ö–∞–±–∞—Ä–ª–∞–º–∞“£—ã–∑\n\n"
                            "üìù –ú—ã—Å–∞–ª: /admin_khabar –°–∞–±–∞“õ—Ç–∞—Ä –∞—à—ã–ª–º–∞–π —Ç“±—Ä",
                            protect_content=True
                        )
                    except NetworkError as e:
                        logger.error(f"Network error sending text filter message: {e}", exc_info=True)
                    return  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
                else:
                    # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
                    await context.bot.send_message(
                        chat_id=admin_user_id,
                        text=f"–ñ–∞“£–∞ —Ñ–∞–π–ª: ID: {user_id}, –ê—Ç—ã: {user_name}",
                        reply_markup=reply_markup,
                        protect_content=True
                    )
            logger.info(f"Payment notification sent to admin {admin_user_id} for user {user_id}.")
        except NetworkError as e_admin_notify:
            logger.error(f"Network error sending payment notification to admin {admin_user_id} for user {user_id}: {e_admin_notify}", exc_info=True)
        except Exception as e_notify:
            logger.error(f"Failed to send payment notification to admin {admin_user_id} for user {user_id}: {e_notify}", exc_info=True)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª —á–µ–∫ (—Ñ–æ—Ç–æ –∏–ª–∏ PDF)
    if update.message.photo or (update.message.document and update.message.document.mime_type == 'application/pdf'):
        try:
            await update.message.reply_text("–ß–µ–∫ “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã! –¢”©–ª–µ–º–¥—ñ —Ä–∞—Å—Ç–∞—É–¥—ã –∫“Ø—Ç—ñ“£—ñ–∑.", protect_content=True)
        except NetworkError as e:
            logger.error(f"Network error sending check received confirmation to user: {e}", exc_info=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.message.from_user.id) not in ADMIN_IDS:
        try:
            await update.message.reply_text("–ë“±–ª –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–∫ ”ô–∫—ñ–º—à—ñ–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω.", protect_content=True)
        except NetworkError as e:
            logger.error(f"Network error in admin handler sending auth error: {e}", exc_info=True)
        return

    logger.info("Admin command: Displaying filter buttons.")
    keyboard = [
        [InlineKeyboardButton("–ö“Ø—Ç—É–¥–µ–≥—ñ–ª–µ—Ä (Pending)", callback_data='list_pending')],
        [InlineKeyboardButton("–ú–∞“õ“±–ª–¥–∞–Ω“ì–∞–Ω–¥–∞—Ä (Approved)", callback_data='list_approved')],
        [InlineKeyboardButton("–ë–∞—Å —Ç–∞—Ä—Ç—ã–ª“ì–∞–Ω–¥–∞—Ä (Rejected)", callback_data='list_rejected')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    try:
        await update.message.reply_text("–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä —Ç—ñ–∑—ñ–º—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑:", reply_markup=reply_markup, protect_content=True)
    except NetworkError as e:
        logger.error(f"Network error in admin handler sending user list prompt: {e}", exc_info=True)

# –ù–û–í–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Ç–∞—Ç—É—Å—É
async def show_user_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    status_to_fetch = query.data.split('_')[1] 

    logger.info(f"Admin action: Fetching users with status '{status_to_fetch}'.")
    
    message_text_header = f"--- {status_to_fetch.capitalize()} –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä ---"
    no_users_text = f"“ö–∞–∑—ñ—Ä {status_to_fetch} —Å—Ç–∞—Ç—É—Å—ã –±–∞—Ä –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä –∂–æ“õ."

    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–∏—Å–∫–∞
        try:
            await query.edit_message_text(text=message_text_header)
        except NetworkError as e_net_edit_header:
            logger.error(f"Network error editing message to header in show_user_list ({status_to_fetch}): {e_net_edit_header}", exc_info=True)
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑-–∑–∞ —Å–µ—Ç–∏, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await context.bot.send_message(chat_id=query.from_user.id, text=message_text_header, protect_content=True)
            except NetworkError as e_net_send_header:
                logger.error(f"Network error sending header as new message in show_user_list ({status_to_fetch}): {e_net_send_header}", exc_info=True)
                return # –ï—Å–ª–∏ –¥–∞–∂–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –≤—ã—Ö–æ–¥–∏–º
        except TelegramError as e_tele_edit_header: # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ Telegram API –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            logger.error(f"Telegram API error editing message to header in show_user_list ({status_to_fetch}): {e_tele_edit_header}", exc_info=True)
            try:
                await context.bot.send_message(chat_id=query.from_user.id, text=message_text_header, protect_content=True)
            except (NetworkError, TelegramError) as e_send_header_fallback:
                logger.error(f"Error sending header as new message (fallback) in show_user_list ({status_to_fetch}): {e_send_header_fallback}", exc_info=True)
                return

        conn.rollback() 
        cur.execute("SELECT user_id, username, expiry_date FROM users WHERE status = %s", (status_to_fetch,))
        users = cur.fetchall()

        if not users:
            logger.info(f"No users found with status '{status_to_fetch}'.")
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–æ–≤–æ–µ, —Ç.–∫. –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É–∂–µ –º–æ–≥ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            try:
                await context.bot.send_message(chat_id=query.from_user.id, text=no_users_text, protect_content=True)
            except (NetworkError, TelegramError) as e_no_users:
                logger.error(f"Error sending 'no users found' message in show_user_list ({status_to_fetch}): {e_no_users}", exc_info=True)
            return

        logger.info(f"Found {len(users)} users with status '{status_to_fetch}'.")

        for user_id, username, expiry_date in users:
            user_info = f"{username} (ID: {user_id})"
            action_buttons = []

            if status_to_fetch == 'pending':
                user_info = f"–ö“Ø—Ç—É–¥–µ: {user_info}"
                action_buttons.append(InlineKeyboardButton("–†–∞—Å—Ç–∞—É", callback_data=f'approve_{user_id}'))
                action_buttons.append(InlineKeyboardButton("“ö–∞–±—ã–ª–¥–∞–º–∞—É", callback_data=f'reject_{user_id}'))
            elif status_to_fetch == 'approved':
                expiry_text = expiry_date.strftime('%d.%m.%Y') if expiry_date else "–ë–µ–ª–≥—ñ—Å—ñ–∑"
                user_info = f"–ú–∞“õ“±–ª–¥–∞–Ω“ì–∞–Ω: {user_info} - –ú–µ—Ä–∑—ñ–º—ñ: {expiry_text}"
                action_buttons.append(InlineKeyboardButton("“ö–∞–±—ã–ª–¥–∞–º–∞—É", callback_data=f'reject_{user_id}'))
                action_buttons.append(InlineKeyboardButton("–î–æ—Å—Ç—É–ø—Ç—ã –∞–ª—ã–ø —Ç–∞—Å—Ç–∞—É (Revoke)", callback_data=f'revoke_{user_id}'))
            elif status_to_fetch == 'rejected':
                user_info = f"–ë–∞—Å —Ç–∞—Ä—Ç—ã–ª“ì–∞–Ω: {user_info}"
                action_buttons.append(InlineKeyboardButton("–†–∞—Å—Ç–∞—É", callback_data=f'approve_{user_id}'))
            
            reply_markup_user = InlineKeyboardMarkup([action_buttons]) if action_buttons else None
            try:
                await context.bot.send_message(chat_id=query.from_user.id, text=user_info, reply_markup=reply_markup_user, protect_content=True)
            except NetworkError as e_net_user_info:
                logger.error(f"Network error sending user info for {user_id} in show_user_list ({status_to_fetch}): {e_net_user_info}", exc_info=True)
            except TelegramError as e_tele_user_info:
                logger.error(f"Telegram API error sending user info for {user_id} in show_user_list ({status_to_fetch}): {e_tele_user_info}", exc_info=True)
            
    except psycopg2.Error as e_db:
        logger.error(f"Database error in show_user_list (status: {status_to_fetch}): {e_db}", exc_info=True)
        try:
            # –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫, –ø—Ä–æ–±—É–µ–º –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –æ—à–∏–±–∫—É
            # –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            if query.message and query.message.text == message_text_header: 
                await query.edit_message_text(text=f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö “õ–∞—Ç–µ—Å—ñ ({status_to_fetch} —Ç—ñ–∑—ñ–º—ñ).")
            else:
                await context.bot.send_message(chat_id=query.from_user.id, text=f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö “õ–∞—Ç–µ—Å—ñ ({status_to_fetch} —Ç—ñ–∑—ñ–º—ñ). ”ò–∫—ñ–º—à—ñ–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑.", protect_content=True)
        except (NetworkError, TelegramError) as e_report_db_err:
            logger.error(f"Error reporting DB error to admin in show_user_list ({status_to_fetch}): {e_report_db_err}", exc_info=True)
        conn.rollback()
    except Exception as e_generic:
        logger.error(f"Unexpected error in show_user_list (status: {status_to_fetch}): {e_generic}", exc_info=True)
        try:
            if query.message and query.message.text == message_text_header:
                 await query.edit_message_text(text=f"–ë–µ–ª–≥—ñ—Å—ñ–∑ “õ–∞—Ç–µ ({status_to_fetch} —Ç—ñ–∑—ñ–º—ñ).")
            else:
                await context.bot.send_message(chat_id=query.from_user.id, text=f"–ë–µ–ª–≥—ñ—Å—ñ–∑ “õ–∞—Ç–µ ({status_to_fetch} —Ç—ñ–∑—ñ–º—ñ).", protect_content=True)
        except (NetworkError, TelegramError) as e_report_gen_err:
            logger.error(f"Error reporting generic error to admin in show_user_list ({status_to_fetch}): {e_report_gen_err}", exc_info=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∞–ø–ø—Ä—É–≤–∞ –∏ —Ä–µ–¥–∂–µ–∫—Ç–∞
async def handle_admin_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    admin_chat_id = query.from_user.id # ID –∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É
    
    if str(admin_chat_id) not in ADMIN_IDS:
        try:
            await query.answer("–ë“±–ª –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–∫ ”ô–∫—ñ–º—à—ñ–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω.", show_alert=True)
        except (NetworkError, TelegramError) as e_ans_auth:
            logger.warning(f"Error answering callback query for auth in handle_admin_action: {e_ans_auth}")
            return

    try:
        await query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    except (NetworkError, TelegramError) as e_ans_main:
        logger.warning(f"Error answering callback query in handle_admin_action: {e_ans_main}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç.–∫. —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –ª–æ–≥–∏–∫–∏, –Ω–æ –∞–¥–º–∏–Ω –Ω–µ —É–≤–∏–¥–∏—Ç "—á–∞—Å–∏–∫–∏"

    action, user_id_str = query.data.split('_')
    user_id = int(user_id_str)
    
    user_name = f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã (ID: {user_id})" # Default name
    try:
        user_chat = await context.bot.get_chat(user_id)
        user_name = user_chat.full_name or user_chat.username or f"ID: {user_id}"
    except (NetworkError, TelegramError) as e_get_chat:
        logger.error(f"Could not get chat for user_id {user_id} in handle_admin_action: {e_get_chat}", exc_info=True)
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å user_name –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    except Exception as e_get_chat_other:
        logger.error(f"Unexpected error getting chat for user_id {user_id}: {e_get_chat_other}", exc_info=True)

    admin_confirm_text = ""
    user_notification_text = ""
    db_success = False

    try:
        if action == 'approve':
            logger.info(f"Admin action: Approving user {user_id} ('{user_name}')")
            payment_date = datetime.now()
            expiry_date_val = payment_date + timedelta(days=365) # 12 –º–µ—Å—è—Ü–µ–≤
            cur.execute(
                "UPDATE users SET status = %s, payment_date = %s, expiry_date = %s WHERE user_id = %s",
                ('approved', payment_date, expiry_date_val, user_id)
            )
            conn.commit()
            db_success = True
            logger.info(f"User {user_id} ('{user_name}') approved in DB.")

            reply_markup_lessons = create_lesson_keyboard()
            user_notification_text = f"‚úÖ –¢”©–ª–µ–º —Ä–∞—Å—Ç–∞–ª–¥—ã! –°–∞–±–∞“õ—Ç–∞—Ä“ì–∞ “õ–æ–ª –∂–µ—Ç–∫—ñ–∑—É –∞—à—ã–ª–¥—ã.\\n–ú–µ—Ä–∑—ñ–º—ñ: {expiry_date_val.strftime('%d.%m.%Y')} –¥–µ–π—ñ–Ω.\\n–¢”©–º–µ–Ω–¥–µ–≥—ñ —Å–∞–±–∞“õ—Ç–∞—Ä–¥—ã —Ç–∞“£–¥–∞“£—ã–∑:"
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=user_notification_text,
                    reply_markup=reply_markup_lessons,
                    protect_content=True
                )
                logger.info(f"Approval notification sent to user {user_id}.")
            except (NetworkError, TelegramError) as e_user_approve_notify:
                logger.error(f"Error sending approval notification to user {user_id}: {e_user_approve_notify}", exc_info=True)
            
            admin_confirm_text = f"{user_name} (ID: {user_id}) “Ø—à—ñ–Ω “õ–æ–ª –∂–µ—Ç–∫—ñ–∑—É –∞—à—ã–ª–¥—ã."

        elif action == 'reject':
            logger.info(f"Admin action: Rejecting user {user_id} ('{user_name}')")
            cur.execute(
                "UPDATE users SET status = %s WHERE user_id = %s",
                ('rejected', user_id)
            )
            conn.commit()
            db_success = True
            logger.info(f"User {user_id} ('{user_name}') rejected in DB.")
            
            user_notification_text = "‚ùå –¢”©–ª–µ–º —Ä–∞—Å—Ç–∞–ª–º–∞–¥—ã. “ö–∞–π—Ç–∞ —Ç–µ–∫—Å–µ—Ä—ñ–ø, —á–µ–∫—Ç—ñ “õ–∞–π—Ç–∞ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑."
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=user_notification_text,
                    protect_content=True
                )
                logger.info(f"Rejection notification sent to user {user_id}.")
            except (NetworkError, TelegramError) as e_user_reject_notify:
                logger.error(f"Error sending rejection notification to user {user_id}: {e_user_reject_notify}", exc_info=True)
            
            admin_confirm_text = f"{user_name} (ID: {user_id}) “Ø—à—ñ–Ω “õ–æ–ª –∂–µ—Ç–∫—ñ–∑—É –∂–∞–±—ã–ª–¥—ã (–±–∞—Å —Ç–∞—Ä—Ç—ã–ª–¥—ã)."

        elif action == 'revoke':
            logger.info(f"Admin action: Revoking access for user {user_id} ('{user_name}')")
            cur.execute(
                "UPDATE users SET status = %s, payment_date = NULL, expiry_date = NULL WHERE user_id = %s",
                ('pending', user_id) 
            )
            conn.commit()
            db_success = True
            logger.info(f"Access revoked for user {user_id} ('{user_name}') in DB. Status set to pending.")
            
            user_notification_text = "‚ÑπÔ∏è –°—ñ–∑–¥—ñ“£ –∫—É—Ä—Å“õ–∞ “õ–æ–ª –∂–µ—Ç–∫—ñ–∑—É—ñ“£—ñ–∑ ”ô–∫—ñ–º—à—ñ–º–µ–Ω —Ç–æ“õ—Ç–∞—Ç—ã–ª–¥—ã. “ö–æ—Å—ã–º—à–∞ –∞“õ–ø–∞—Ä–∞—Ç –∞–ª—É “Ø—à—ñ–Ω ”ô–∫—ñ–º—à—ñ–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑."
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=user_notification_text,
                    protect_content=True
                )
                logger.info(f"Revoke notification sent to user {user_id}.")
            except (NetworkError, TelegramError) as e_user_revoke_notify:
                logger.error(f"Error sending revoke notification to user {user_id}: {e_user_revoke_notify}", exc_info=True)

            admin_confirm_text = f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã {user_name} (ID: {user_id}) “Ø—à—ñ–Ω “õ–æ–ª –∂–µ—Ç–∫—ñ–∑—É —Ç–æ“õ—Ç–∞—Ç—ã–ª–¥—ã. –ï–Ω–¥—ñ –æ–ª –∫“Ø—Ç—É–¥–µ."

        # Update admin's message only if DB operation was successful
        if db_success and admin_confirm_text:
            try:
                if query.message.caption is not None:
                    # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º/–¥–æ–∫—É–º–µ–Ω—Ç–æ–º - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
                    await query.edit_message_caption(caption=admin_confirm_text)
                elif query.message.text is not None:
                    # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                    await query.edit_message_text(text=admin_confirm_text)
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ —Ç–µ–∫—Å—Ç–∞, –Ω–∏ –ø–æ–¥–ø–∏—Å–∏ - –ø—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
                    await query.edit_message_reply_markup(reply_markup=None)
                    logger.info(f"Admin message (original with buttons for {user_id}, action {action}) had no text/caption, buttons removed.")
            except (NetworkError, TelegramError) as e_admin_edit:
                logger.error(f"Error updating admin's original message for user {user_id}, action {action}: {e_admin_edit}", exc_info=True)
                # Fallback: send new message to admin if edit fails
                try:
                    await context.bot.send_message(chat_id=admin_chat_id, text=f"‚úÖ {admin_confirm_text}", protect_content=True)
                except (NetworkError, TelegramError) as e_admin_fallback:
                    logger.error(f"Error sending admin fallback confirmation for {action} user {user_id}: {e_admin_fallback}", exc_info=True)

    except psycopg2.Error as e_db_main:
        logger.error(f"Database error in handle_admin_action for user {user_id} ('{user_name}'), action '{action}': {e_db_main}", exc_info=True)
        conn.rollback()
        error_message_for_admin = f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö “õ–∞—Ç–µ—Å—ñ ({action} {user_name}). ”ò–∫—ñ–º—à—ñ–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑."
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤–º–µ—Å—Ç–æ –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await context.bot.send_message(chat_id=admin_chat_id, text=error_message_for_admin, protect_content=True)
        except (NetworkError, TelegramError) as e_report_db_err_admin:
             logger.error(f"Error reporting DB error to admin in handle_admin_action: {e_report_db_err_admin}", exc_info=True)

    except Exception as e_generic_main:
        logger.error(f"Unexpected error in handle_admin_action for user {user_id} ('{user_name}'), action '{action}': {e_generic_main}", exc_info=True)
        error_message_for_admin = f"‚ö†Ô∏è –ë–µ–ª–≥—ñ—Å—ñ–∑ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã ({action} {user_name})."
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤–º–µ—Å—Ç–æ –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await context.bot.send_message(chat_id=admin_chat_id, text=error_message_for_admin, protect_content=True)
        except (NetworkError, TelegramError) as e_report_gen_err_admin:
            logger.error(f"Error reporting generic error to admin in handle_admin_action: {e_report_gen_err_admin}", exc_info=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–∫–∞
async def select_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    lesson_id_str = query.data.split('_')[1]
    lesson_index = int(lesson_id_str) - 1 

    await query.answer()

    lesson_title = LESSON_TITLES[lesson_index] if 0 <= lesson_index < len(LESSON_TITLES) else f"–°–∞–±–∞“õ-{lesson_id_str}"

    try:
        conn.rollback() 
        cur.execute("SELECT status FROM users WHERE user_id = %s", (user_id,))
        user_status_row = cur.fetchone()

        if not user_status_row or user_status_row[0] != 'approved':
            logger.info(f"User {user_id} tried to access lesson '{lesson_title}' but status is not 'approved'.")
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"'{lesson_title}' —Ç–∞“£–¥–∞—É“ì–∞ —Ç—ã—Ä—ã—Å—Ç—ã“£—ã–∑, –±—ñ—Ä–∞“õ –∫—É—Ä—Å“õ–∞ “õ–æ–ª –∂–µ—Ç–∫—ñ–∑—É—ñ“£—ñ–∑ –∂–∞–±—ã“õ.",
                    protect_content=True
                )
            except NetworkError as e:
                logger.error(f"Network error sending access denied message in select_lesson: {e}", exc_info=True)
            try:
                await query.edit_message_reply_markup(reply_markup=None)
            except NetworkError as e_edit_nm: # NetworkError
                logger.warning(f"Network error editing message reply markup in select_lesson (denied access): {e_edit_nm}", exc_info=True)
            except Exception as e_edit: # Other errors like message not modified, etc.
                logger.warning(f"Could not edit message for user {user_id} in select_lesson after denied access: {e_edit}", exc_info=True)
            return

        logger.info(f"User {user_id} (status: approved) selected lesson '{lesson_title}' (index: {lesson_index}).")
        
        lesson_folder_path = os.path.join("lessons", lesson_title)
        logger.info(f"Looking for lesson files in: {lesson_folder_path}")

        if os.path.isdir(lesson_folder_path):
            raw_audio_files = [
                f for f in os.listdir(lesson_folder_path) 
                if os.path.isfile(os.path.join(lesson_folder_path, f)) and 
                   f.lower().endswith(('.mp3', '.m4a', '.ogg', '.wav', '.opus'))
            ]

            problematic_lesson_indices = [4, 6, 9, 11, 20, 24] 
            audio_files_sorted = []
            if lesson_index in problematic_lesson_indices:
                logger.info(f"Applying SPECIAL sorting for problematic lesson: '{lesson_title}' (index {lesson_index})")
                
                def get_sort_key_for_problematic(filename):
                    # Priority 0: "—Å- –ß–ò–°–õ–û —Ç" pattern (handles spaces)
                    match_sc_t = re.search(r'—Å-\s*(\d+)\s*—Ç', filename, re.IGNORECASE)
                    if match_sc_t:
                        return (0, int(match_sc_t.group(1))) 

                    # Priority 1: Leading number prefix (using existing extract_number_prefix)
                    prefix_num = extract_number_prefix(filename)
                    if prefix_num != float('inf'):
                        return (1, prefix_num)
                    
                    # Priority 2: Fallback to filename for alphabetical sort (case-insensitive)
                    return (2, filename.lower())

                audio_files_sorted = sorted(raw_audio_files, key=get_sort_key_for_problematic)
            else:
                # Original logic for non-problematic lessons (alphabetical sort as per existing code)
                logger.info(f"Applying default alphabetical sorting for non-problematic lesson: '{lesson_title}' (index {lesson_index})")
                audio_files_sorted = sorted(raw_audio_files)
            
            audio_files = audio_files_sorted

            if audio_files:
                try:
                    await context.bot.send_message(chat_id=user_id, text=f"'{lesson_title}' —Å–∞–±–∞“ì—ã–Ω—ã“£ –º–∞—Ç–µ—Ä–∏–∞–ª–¥–∞—Ä—ã –∂—ñ–±–µ—Ä—ñ–ª—É–¥–µ...", protect_content=True)
                except NetworkError as e:
                    logger.error(f"Network error sending 'materials sending' message in select_lesson: {e}", exc_info=True)
                
                for audio_file_name in audio_files:
                    audio_file_path = os.path.join(lesson_folder_path, audio_file_name)
                    try:
                        logger.info(f"Sending audio: {audio_file_path} to user {user_id}")
                        with open(audio_file_path, 'rb') as audio_fp:
                            await context.bot.send_audio(
                                chat_id=user_id, 
                                audio=audio_fp, 
                                caption=audio_file_name,
                                protect_content=True
                            )
                        logger.info(f"Successfully sent {audio_file_name}")
                    except NetworkError as e_send_audio_net:
                        logger.error(f"Network error sending audio file {audio_file_path} to user {user_id}: {e_send_audio_net}", exc_info=True)
                        try:
                            await context.bot.send_message(chat_id=user_id, text=f"'{audio_file_name}' —Ñ–∞–π–ª—ã–Ω –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ –∂–µ–ª—ñ “õ–∞—Ç–µ—Å—ñ –æ—Ä—ã–Ω –∞–ª–¥—ã.", protect_content=True)
                        except NetworkError as e_inner:
                            logger.error(f"Network error sending audio send error message: {e_inner}", exc_info=True)
                    except Exception as e_send_audio:
                        logger.error(f"Failed to send audio file {audio_file_path} to user {user_id}: {e_send_audio}", exc_info=True)
                        try:
                            await context.bot.send_message(chat_id=user_id, text=f"'{audio_file_name}' —Ñ–∞–π–ª—ã–Ω –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã.", protect_content=True)
                        except NetworkError as e_inner:
                            logger.error(f"Network error sending audio send generic error message: {e_inner}", exc_info=True)
                try:
                    await context.bot.send_message(chat_id=user_id, text=f"'{lesson_title}' —Å–∞–±–∞“ì—ã–Ω—ã“£ –±–∞—Ä–ª—ã“õ –º–∞—Ç–µ—Ä–∏–∞–ª–¥–∞—Ä—ã –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ.", protect_content=True)
                except NetworkError as e:
                    logger.error(f"Network error sending 'all materials sent' message: {e}", exc_info=True)
            else:
                logger.info(f"No audio files found in {lesson_folder_path}.")
                try:
                    await context.bot.send_message(chat_id=user_id, text=f"'{lesson_title}' —Å–∞–±–∞“ì—ã “Ø—à—ñ–Ω –∞—É–¥–∏–æ –º–∞—Ç–µ—Ä–∏–∞–ª–¥–∞—Ä ”ô–∑—ñ—Ä–≥–µ –∂–æ“õ –Ω–µ–º–µ—Å–µ —Ç–∞–±—ã–ª–º–∞–¥—ã.", protect_content=True)
                except NetworkError as e:
                    logger.error(f"Network error sending 'no audio materials' message: {e}", exc_info=True)
        else:
            logger.warning(f"Lesson folder not found: {lesson_folder_path}")
            try:
                await context.bot.send_message(chat_id=user_id, text=f"'{lesson_title}' —Å–∞–±–∞“ì—ã–Ω—ã“£ –º–∞—Ç–µ—Ä–∏–∞–ª–¥–∞—Ä—ã —Ç–∞–±—ã–ª–º–∞–¥—ã. ”ò–∫—ñ–º—à—ñ–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑.", protect_content=True)
            except NetworkError as e:
                logger.error(f"Network error sending 'lesson folder not found' message: {e}", exc_info=True)

    except psycopg2.Error as e_db:
        logger.error(f"Database error in select_lesson for user {user_id}, lesson '{lesson_title}': {e_db}", exc_info=True)
        # query.answer() —É–∂–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω
        try:
            await context.bot.send_message(chat_id=user_id, text="–î–µ—Ä–µ–∫“õ–æ—Ä “õ–∞—Ç–µ—Å—ñ –æ—Ä—ã–Ω –∞–ª–¥—ã. ”ò–∫—ñ–º—à—ñ–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑.", protect_content=True)
        except NetworkError as e_net:
            logger.error(f"Network error sending DB error in select_lesson: {e_net}", exc_info=True)
        conn.rollback()
    except Exception as e_generic:
        logger.error(f"Unexpected error in select_lesson for user {user_id}, lesson '{lesson_title}': {e_generic}", exc_info=True)
        # query.answer() —É–∂–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω
        try:
            await context.bot.send_message(chat_id=user_id, text="–ë–µ–ª–≥—ñ—Å—ñ–∑ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã. ”ò–∫—ñ–º—à—ñ–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑.", protect_content=True)
        except NetworkError as e_net:
            logger.error(f"Network error sending generic error in select_lesson: {e_net}", exc_info=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /approve (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
async def approve(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.message.from_user.id) not in ADMIN_IDS:
        try:
            await update.message.reply_text("–ë“±–ª –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–∫ ”ô–∫—ñ–º—à—ñ–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω.", protect_content=True)
        except NetworkError as e:
            logger.error(f"Network error in legacy /approve (auth): {e}", exc_info=True)
        return
    try:
        user_id = int(context.args[0])
        logger.info(f"Legacy /approve command for user_id: {user_id}")
        payment_date = datetime.now()
        expiry_date = payment_date + timedelta(days=365) # 12 –º–µ—Å—è—Ü–µ–≤
        cur.execute(
            "UPDATE users SET status = %s, payment_date = %s, expiry_date = %s WHERE user_id = %s",
            ('approved', payment_date, expiry_date, user_id)
        )
        conn.commit()
        logger.info(f"User {user_id} approved via legacy /approve.")

        reply_markup = create_lesson_keyboard()
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚úÖ –¢”©–ª–µ–º —Ä–∞—Å—Ç–∞–ª–¥—ã! –°–∞–±–∞“õ—Ç–∞—Ä“ì–∞ “õ–æ–ª –∂–µ—Ç–∫—ñ–∑—É –∞—à—ã–ª–¥—ã (legacy /approve –∞—Ä“õ—ã–ª—ã).\\n–ú–µ—Ä–∑—ñ–º—ñ: {expiry_date.strftime('%d.%m.%Y')} –¥–µ–π—ñ–Ω.\\n–¢”©–º–µ–Ω–¥–µ–≥—ñ —Å–∞–±–∞“õ—Ç–∞—Ä–¥—ã —Ç–∞“£–¥–∞“£—ã–∑:",
                reply_markup=reply_markup,
                protect_content=True
            )
        except NetworkError as e:
            logger.error(f"Network error sending approval message in legacy /approve to user {user_id}: {e}", exc_info=True)
        
        try:
            await update.message.reply_text(f"“ö–æ–ª –∂–µ—Ç–∫—ñ–∑—É ID: {user_id} “Ø—à—ñ–Ω –∞—à—ã–ª–¥—ã (legacy /approve).", protect_content=True)
        except NetworkError as e:
            logger.error(f"Network error sending confirmation message in legacy /approve to admin: {e}", exc_info=True)

    except (IndexError, ValueError):
        try:
            await update.message.reply_text("–ü–∞–π–¥–∞–ª–∞–Ω—É: /approve <user_id>", protect_content=True)
        except NetworkError as e:
            logger.error(f"Network error sending usage message in legacy /approve: {e}", exc_info=True)
    except psycopg2.Error as e_db:
        logger.error(f"Database error in legacy /approve for user_id {context.args[0] if context.args else 'N/A'}: {e_db}", exc_info=True)
        conn.rollback()
        try:
            await update.message.reply_text("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö “õ–∞—Ç–µ—Å—ñ (/approve). ”ò–∫—ñ–º—à—ñ–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑.", protect_content=True)
        except NetworkError as e:
            logger.error(f"Network error sending DB error message in legacy /approve: {e}", exc_info=True)
    except Exception as e_generic:
        logger.error(f"Unexpected error in legacy /approve for user_id {context.args[0] if context.args else 'N/A'}: {e_generic}", exc_info=True)
        try:
            await update.message.reply_text("–ë–µ–ª–≥—ñ—Å—ñ–∑ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã (/approve).", protect_content=True)
        except NetworkError as e:
            logger.error(f"Network error sending generic error message in legacy /approve: {e}", exc_info=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reject (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
async def reject(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.message.from_user.id) not in ADMIN_IDS:
        try:
            await update.message.reply_text("–ë“±–ª –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–∫ ”ô–∫—ñ–º—à—ñ–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω.", protect_content=True)
        except NetworkError as e:
            logger.error(f"Network error in legacy /reject (auth): {e}", exc_info=True)
        return
    try:
        user_id = int(context.args[0])
        logger.info(f"Legacy /reject command for user_id: {user_id}")
        cur.execute(
            "UPDATE users SET status = %s WHERE user_id = %s",
            ('rejected', user_id)
        )
        conn.commit()
        logger.info(f"User {user_id} rejected via legacy /reject.")

        try:
            await context.bot.send_message(
                chat_id=user_id,
                text="‚ùå –¢”©–ª–µ–º —Ä–∞—Å—Ç–∞–ª–º–∞–¥—ã (legacy /reject –∞—Ä“õ—ã–ª—ã). “ö–∞–π—Ç–∞ —Ç–µ–∫—Å–µ—Ä—ñ–ø, —á–µ–∫—Ç—ñ “õ–∞–π—Ç–∞ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑.",
                protect_content=True
            )
        except NetworkError as e:
            logger.error(f"Network error sending rejection message in legacy /reject to user {user_id}: {e}", exc_info=True)
        
        try:
            await update.message.reply_text(f"“ö–æ–ª –∂–µ—Ç–∫—ñ–∑—É ID: {user_id} “Ø—à—ñ–Ω –∂–∞–±—ã–ª–¥—ã (legacy /reject).", protect_content=True)
        except NetworkError as e:
            logger.error(f"Network error sending confirmation message in legacy /reject to admin: {e}", exc_info=True)

    except (IndexError, ValueError):
        try:
            await update.message.reply_text("–ü–∞–π–¥–∞–ª–∞–Ω—É: /reject <user_id>", protect_content=True)
        except NetworkError as e:
            logger.error(f"Network error sending usage message in legacy /reject: {e}", exc_info=True)
    except psycopg2.Error as e_db:
        logger.error(f"Database error in legacy /reject for user_id {context.args[0] if context.args else 'N/A'}: {e_db}", exc_info=True)
        conn.rollback()
        try:
            await update.message.reply_text("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö “õ–∞—Ç–µ—Å—ñ (/reject). ”ò–∫—ñ–º—à—ñ–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑.", protect_content=True)
        except NetworkError as e:
            logger.error(f"Network error sending DB error message in legacy /reject: {e}", exc_info=True)
    except Exception as e_generic:
        logger.error(f"Unexpected error in legacy /reject for user_id {context.args[0] if context.args else 'N/A'}: {e_generic}", exc_info=True)
        try:
            await update.message.reply_text("–ë–µ–ª–≥—ñ—Å—ñ–∑ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã (/reject).", protect_content=True)
        except NetworkError as e:
            logger.error(f"Network error sending generic error message in legacy /reject: {e}", exc_info=True)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä“ì–∞ —Ö–∞–±–∞—Ä–ª–∞—Å—É)
async def contact_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    user_name = user.full_name

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    if not context.args:
        try:
            await update.message.reply_text(
                "üìû ”ò–∫—ñ–º—à—ñ–≥–µ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É “Ø—à—ñ–Ω –∫–æ–º–∞–Ω–¥–∞–Ω—ã –∫–µ–ª–µ—Å—ñ —Ç“Ø—Ä–¥–µ –ø–∞–π–¥–∞–ª–∞–Ω—ã“£—ã–∑:\n\n"
                "üî∏ /admin_khabar –°—ñ–∑–¥—ñ“£ —Ö–∞–±–∞—Ä–ª–∞–º–∞“£—ã–∑\n"
                "üî∏ /contact_admin –°—ñ–∑–¥—ñ“£ —Ö–∞–±–∞—Ä–ª–∞–º–∞“£—ã–∑\n\n"
                "üìù –ú—ã—Å–∞–ª:\n"
                "/admin_khabar –°–∞–±–∞“õ—Ç–∞—Ä –∞—à—ã–ª–º–∞–π —Ç“±—Ä\n"
                "/contact_admin –¢”©–ª–µ–º —Ç—É—Ä–∞–ª—ã —Å“±—Ä–∞“ì—ã–º –±–∞—Ä\n\n"
                "‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –º–µ–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã“£ –∞—Ä–∞—Å—ã–Ω–¥–∞ –±–æ—Å –æ—Ä—ã–Ω “õ–∞–ª–¥—ã—Ä—ã“£—ã–∑!",
                protect_content=True
            )
        except NetworkError as e:
            logger.error(f"Network error in contact_admin sending usage info: {e}", exc_info=True)
        return

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = ' '.join(context.args)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=f"üì® –ñ–∞“£–∞ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–¥–∞–Ω:\n\n"
                     f"üë§ –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã: {user_name}\n"
                     f"üÜî ID: {user_id}\n"
                     f"üí¨ –•–∞–±–∞—Ä–ª–∞–º–∞: {message_text}\n\n"
                     f"üì§ –ñ–∞—É–∞–ø –±–µ—Ä—É “Ø—à—ñ–Ω: /reply {user_id} –∂–∞—É–∞–ø_–º”ô—Ç—ñ–Ω—ñ",
                protect_content=True
            )
            logger.info(f"User message sent to admin {admin_id} from user {user_id}")
        except (NetworkError, TelegramError) as e:
            logger.error(f"Error sending user message to admin {admin_id}: {e}", exc_info=True)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await update.message.reply_text(
            "‚úÖ –°—ñ–∑–¥—ñ“£ —Ö–∞–±–∞—Ä–ª–∞–º–∞“£—ã–∑ ”ô–∫—ñ–º—à—ñ–≥–µ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ!\n"
            "‚è≥ –ñ–∞—É–∞–ø—Ç—ã –∫“Ø—Ç—ñ“£—ñ–∑.",
            protect_content=True
        )
    except NetworkError as e:
        logger.error(f"Network error sending confirmation to user in contact_admin: {e}", exc_info=True)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def reply_to_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    if str(update.message.from_user.id) not in ADMIN_IDS:
        try:
            await update.message.reply_text("–ë“±–ª –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–∫ ”ô–∫—ñ–º—à—ñ–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω.", protect_content=True)
        except NetworkError as e:
            logger.error(f"Network error in reply_to_user sending auth error: {e}", exc_info=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /reply user_id —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    if len(context.args) < 2:
        try:
            await update.message.reply_text(
                "–ü–∞–π–¥–∞–ª–∞–Ω—É: /reply <user_id> <–∂–∞—É–∞–ø –º”ô—Ç—ñ–Ω—ñ>\n"
                "–ú—ã—Å–∞–ª: /reply 123456789 –°—ñ–∑–¥—ñ“£ –º”ô—Å–µ–ª–µ“£—ñ–∑ —à–µ—à—ñ–ª–¥—ñ",
                protect_content=True
            )
        except NetworkError as e:
            logger.error(f"Network error in reply_to_user sending usage info: {e}", exc_info=True)
        return

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        user_id = int(context.args[0])
        reply_text = ' '.join(context.args[1:])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await context.bot.send_message(
            chat_id=user_id,
            text=f"”ò–∫—ñ–º—à—ñ–¥–µ–Ω –∂–∞—É–∞–ø:\n\n{reply_text}",
            protect_content=True
        )

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∞–¥–º–∏–Ω—É
        try:
            await update.message.reply_text(
                f"–ñ–∞—É–∞–ø –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã“ì–∞ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ (ID: {user_id})",
                protect_content=True
            )
        except NetworkError as e:
            logger.error(f"Network error sending confirmation to admin in reply_to_user: {e}", exc_info=True)

        logger.info(f"Admin {update.message.from_user.id} sent reply to user {user_id}: {reply_text}")

    except ValueError:
        try:
            await update.message.reply_text(
                "“ö–∞—Ç–µ: user_id —Å–∞–Ω –±–æ–ª—É—ã –∫–µ—Ä–µ–∫\n"
                "–ú—ã—Å–∞–ª: /reply 123456789 –°—ñ–∑–¥—ñ“£ –∂–∞—É–∞–±—ã“£—ã–∑",
                protect_content=True
            )
        except NetworkError as e:
            logger.error(f"Network error sending ValueError message in reply_to_user: {e}", exc_info=True)
    except (NetworkError, TelegramError) as e:
        logger.error(f"Error sending reply to user {context.args[0] if context.args else 'N/A'}: {e}", exc_info=True)
        try:
            await update.message.reply_text(
                "–ñ–∞—É–∞–ø—Ç—ã –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã. –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã ID –¥“±—Ä—ã—Å –µ–∫–µ–Ω—ñ–Ω —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑.",
                protect_content=True
            )
        except NetworkError as ne:
            logger.error(f"Network error sending error message in reply_to_user: {ne}", exc_info=True)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ (–°“±—Ä–∞–Ω—ã—Å—Ç–∞—Ä–¥—ã “õ–∞—Ä–∞—É)
async def view_requests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    if str(update.message.from_user.id) not in ADMIN_IDS:
        try:
            await update.message.reply_text("‚ùå –ë“±–ª –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–∫ ”ô–∫—ñ–º—à—ñ–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω.", protect_content=True)
        except NetworkError as e:
            logger.error(f"Network error in view_requests sending auth error: {e}", exc_info=True)
        return

    try:
        await update.message.reply_text(
            "üìã –°“±—Ä–∞–Ω—ã—Å—Ç–∞—Ä–¥—ã “õ–∞—Ä–∞—É –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä—ã:\n\n"
            "üî∏ /view_requests - –û—Å—ã –∞–Ω—ã“õ—Ç–∞–º–∞\n"
            "üî∏ /suranys_karu - –û—Å—ã –∞–Ω—ã“õ—Ç–∞–º–∞ (“õ–∞–∑–∞“õ—à–∞)\n"
            "üî∏ /reply <user_id> <–∂–∞—É–∞–ø> - –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã“ì–∞ –∂–∞—É–∞–ø –±–µ—Ä—É\n\n"
            "üìù –ñ–∞—É–∞–ø –±–µ—Ä—É –º—ã—Å–∞–ª—ã:\n"
            "/reply 123456789 –°—ñ–∑–¥—ñ“£ –º”ô—Å–µ–ª–µ“£—ñ–∑ —à–µ—à—ñ–ª–¥—ñ\n\n"
            "‚ÑπÔ∏è –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä–¥–∞–Ω –∫–µ–ª–≥–µ–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä –∞–≤—Ç–æ–º–∞—Ç—Ç—ã —Ç“Ø—Ä–¥–µ —Å—ñ–∑–≥–µ –∂—ñ–±–µ—Ä—ñ–ª–µ–¥—ñ.\n"
            "”ò—Ä —Ö–∞–±–∞—Ä–ª–∞–º–∞–¥–∞ –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–Ω—ã“£ ID –∫”©—Ä—Å–µ—Ç—ñ–ª–µ–¥—ñ - –æ–Ω—ã /reply –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω–¥–∞ –ø–∞–π–¥–∞–ª–∞–Ω—ã“£—ã–∑.",
            protect_content=True
        )
    except NetworkError as e:
        logger.error(f"Network error in view_requests: {e}", exc_info=True)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application = Application.builder().token(TOKEN).connect_timeout(60).read_timeout(60).write_timeout(60).build()
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(next_step, pattern='next'))
        application.add_handler(CallbackQueryHandler(button, pattern='start'))
        application.add_handler(CallbackQueryHandler(get_access, pattern='get_access'))

        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–∫–∞–∑–∞—Ö—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
        application.add_handler(CommandHandler("admin_khabar", contact_admin))  # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä“ì–∞ —Ö–∞–±–∞—Ä–ª–∞—Å—É
        application.add_handler(CommandHandler("contact_admin", contact_admin))  # English version

        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–¥–º–∏–Ω–æ–º
        application.add_handler(CommandHandler("suranys_karu", view_requests))  # –°“±—Ä–∞–Ω—ã—Å—Ç–∞—Ä–¥—ã “õ–∞—Ä–∞—É
        application.add_handler(CommandHandler("view_requests", view_requests))  # English version

        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        application.add_handler(CommandHandler("reply", reply_to_user))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–æ–Ω—Ü–µ, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã
        application.add_handler(MessageHandler(filters.PHOTO | filters.Document.PDF, handle_payment))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_payment))
        
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("admin", admin))
        application.add_handler(CallbackQueryHandler(show_user_list, pattern='^list_(pending|approved|rejected)$'))
        application.add_handler(CallbackQueryHandler(handle_admin_action, pattern='^(approve|reject|revoke)_\\d+$'))
        application.add_handler(CallbackQueryHandler(select_lesson, pattern='^lesson_\\d+$'))
        application.add_handler(CommandHandler("approve", approve))
        application.add_handler(CommandHandler("reject", reject))
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)
        
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        cur.close()
        conn.close()
    except Exception as e:
        logger.critical(f"Critical error in main function: {e}")
        raise e

if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    load_video_file_id()
    main()
