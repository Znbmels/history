from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import psycopg2
from datetime import datetime, timedelta
import logging
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# API-—Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
TOKEN = os.environ.get('TOKEN', '7991006616:AAEuHwhqbFyMVXTVy56ocv22JWZELf5kM7o')

# Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_IDS = ['277399219'] # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–æ–∫, –¥–∞–∂–µ —Å –æ–¥–Ω–∏–º ID
# –ù–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤ (–û–ë–ù–û–í–õ–ï–ù–û —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–∏—Å–∫—É –ø–∞–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
LESSON_TITLES = [
    "1 —Å–∞–±–∞“õ –û—Ä—Ç–∞–ª—ã“õ –ê–∑–∏—è –∂”ô–Ω–µ “∞–ª—ã –î–∞–ª–∞",
    "2 —Å–∞–±–∞“õ “ö–∞–∑–∞“õ—Å—Ç–∞–Ω  —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è—Å—ã–Ω–¥–∞“ì—ã —Ç–∞—Å ,“õ–æ–ª–∞ –∂”ô–Ω–µ —Ç–µ–º—ñ—Ä –¥”ô—É—ñ—Ä–ª–µ—Ä—ñ",
    "3 —Å–∞–±–∞“õ. “ö–∞–∑–∞“õ—Å—Ç–∞–Ω —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è—Å—ã–Ω–¥–∞“ì—ã –∞–ª“ì–∞—à“õ—ã —Ç–∞–π–ø–∞–ª—ã“õ –æ–¥–∞“õ—Ç–∞—Ä –º–µ–Ω –µ—Ä—Ç–µ–¥–µ–≥—ñ –º–µ–º–ª–µ–∫–µ—Ç—Ç–µ—Ä",
    "4 —Å–∞–±–∞“õ. –ï—Ä—Ç–µ –æ—Ä—Ç–∞ “ì–∞—Å—ã—Ä–ª–∞—Ä–¥–∞“ì—ã “ö–∞–∑–∞“õ—Å—Ç–∞–Ω  —Ç–∞—Ä–∏—Ö—ã",
    "5 —Å–∞–±–∞“õ. VI-IX “ì–∞—Å—ã—Ä–ª–∞—Ä–¥–∞“ì—ã “ö–∞–∑–∞“õ—Å—Ç–∞–Ω  –º”ô–¥–µ–Ω–∏–µ—Ç—ñ",
    "6 —Å–∞–±–∞“õ. –î–∞–º—ã“ì–∞–Ω –æ—Ä—Ç–∞ “ì–∞—Å—ã—Ä–ª–∞—Ä –º–µ–º–ª–µ–∫–µ—Ç—Ç–µ—Ä—ñ–Ω—ñ“£ —Ç–∞—Ä–∏—Ö—ã",
    "7 —Å–∞–±–∞“õ. IX-XIII “ì–∞—Å—ã—Ä–ª–∞—Ä–¥–∞“ì—ã “ö–∞–∑–∞“õ—Å—Ç–∞–Ω  –º”ô–¥–µ–Ω–∏–µ—Ç—ñ",
    "8 —Å–∞–±–∞“õ. –ö–µ–π—ñ–Ω–≥—ñ –æ—Ä—Ç–∞ “ì–∞—Å—ã—Ä–ª–∞—Ä —Ç–∞—Ä–∏—Ö—ã.(XIII-XVII “ì–∞—Å—ã—Ä–ª–∞—Ä)",
    "9 —Å–∞–±–∞“õ. XIII-XV “ì–∞—Å—ã—Ä–¥—ã“£ –±—ñ—Ä—ñ–Ω—à—ñ –∂–∞—Ä—Ç—ã—Å—ã–Ω–¥–∞“ì—ã –º–µ–º–ª–µ–∫–µ—Ç—Ç–µ—Ä–¥—ñ“£ —Å–∞—è—Å–∏ “õ“±—Ä—ã–ª—ã–º—ã, —ç–∫–æ–Ω–æ–º–∏–∫–∞—Å—ã –∂”ô–Ω–µ –º”ô–¥–µ–Ω–∏–µ—Ç—ñ",
    "10 —Å–∞–±–∞“õ. –ë—ñ—Ä—Ç“±—Ç–∞—Å “ö–∞–∑–∞“õ –º–µ–º–ª–µ–∫–µ—Ç—ñ–Ω—ñ“£ “õ“±—Ä—ã–ª—É—ã",
    "11 —Å–∞–±–∞“õ.XV-XVII “ì–∞—Å—ã—Ä–ª–∞—Ä–¥–∞“ì—ã “ö–∞–∑–∞“õ —Ö–∞–Ω–¥—ã“ì—ã–Ω—ã“£ ”ô–ª–µ—É–º–µ—Ç—Ç—ñ–∫-—ç–∫–æ–Ω–æ–º–∏–∫–∞–ª—ã“õ –¥–∞–º—É—ã –∂”ô–Ω–µ –º”ô–¥–µ–Ω–∏–µ—Ç—ñ",
    "12 —Å–∞–±–∞“õ. “ö–∞–∑–∞“õ - –∂–æ“£“ì–∞—Ä —Å–æ“ì—ã—Å—Ç–∞—Ä—ã",
    "13 —Å–∞–±–∞“õ. XVIII “ì–∞—Å—ã—Ä–¥–∞“ì—ã “ö–∞–∑–∞“õ —Ö–∞–Ω–¥—ã“ì—ã",
    "14 —Å–∞–±–∞“õ. XVIII “ì–∞—Å—ã—Ä–¥–∞“ì—ã “ö–∞–∑–∞“õ—Å—Ç–∞–Ω  –º”ô–¥–µ–Ω–∏–µ—Ç—ñ",
    "15 —Å–∞–±–∞“õ. –û—Ç–∞—Ä–ª–∞—É –∂”ô–Ω–µ “±–ª—Ç-–∞–∑–∞—Ç—Ç—ã“õ –∫“Ø—Ä–µ—Å",
    "16 —Å–∞–±–∞“õ. “ö–∞–∑–∞“õ—Å—Ç–∞–Ω –†–µ—Å–µ–π –∏–º–ø–µ—Ä–∏—è—Å—ã–Ω—ã“£ “õ“±—Ä–∞–º—ã–Ω–¥–∞",
    "17 —Å–∞–±–∞“õ. “ö–∞–∑–∞“õ—Å—Ç–∞–Ω–Ω—ã“£ XIX-XX “ì–∞—Å—ã—Ä –±–∞—Å—ã–Ω–¥–∞“ì—ã –º”ô–¥–µ–Ω–∏–µ—Ç—ñ",
    "18 —Å–∞–±–∞“õ. XX “ì–∞—Å—ã—Ä–¥—ã“£ –±–∞—Å—ã–Ω–¥–∞“ì—ã “ö–∞–∑–∞“õ—Å—Ç–∞–Ω",
    "19 —Å–∞–±–∞“õ. “ö–∞–∑–∞“õ—Å—Ç–∞–Ω–¥–∞ –ö–µ“£–µ—Å –±–∏–ª—ñ–≥—ñ–Ω—ñ“£ –æ—Ä–Ω–∞—É—ã",
    "20 —Å–∞–±–∞“õ. “ö–∞–∑–∞“õ—Å—Ç–∞–Ω  —Ç–æ—Ç–∞–ª–∏—Ç–∞—Ä–ª—ã“õ –∂“Ø–π–µ –∫–µ–∑–µ“£—ñ–Ω–¥–µ",
    "21 —Å–∞–±–∞“õ. –ö–µ“£–µ—Å—Ç—ñ–∫ “ö–∞–∑–∞“õ—Å—Ç–∞–Ω–Ω—ã“£ –º”ô–¥–µ–Ω–∏–µ—Ç—ñ (1920-1930 –∂—ã–ª–¥–∞—Ä)",
    "22 —Å–∞–±–∞“õ. “ö–∞–∑–∞“õ—Å—Ç–∞–Ω “∞–ª—ã –û—Ç–∞–Ω —Å–æ“ì—ã—Å—ã –∂—ã–ª–¥–∞—Ä—ã–Ω–¥–∞.(1941-1945 –∂—ã–ª–¥–∞—Ä)",
    "23 —Å–∞–±–∞“õ. “ö–∞–∑–∞“õ—Å—Ç–∞–Ω —Å–æ“ì—ã—Å—Ç–∞–Ω –∫–µ–π—ñ–Ω–≥—ñ –∂—ã–ª–¥–∞—Ä–¥–∞ (1946-1953 –∂—ã–ª–¥–∞—Ä)",
    "24 —Å–∞–±–∞“õ. “ö–∞–∑–∞“õ—Å—Ç–∞–Ω –∂—ã–ª—ã–º—ã“õ –∫–µ–∑–µ“£—ñ–Ω–¥–µ .(1954-1964 –∂—ã–ª–¥–∞—Ä)",
    "25 —Å–∞–±–∞“õ. “ö–∞–∑–∞“õ—Å—Ç–∞–Ω —Ç–æ“õ—ã—Ä–∞—É –∫–µ–∑–µ“£—ñ–Ω–¥–µ. (1965-1985 –∂—ã–ª–¥–∞—Ä)",
    "26 —Å–∞–±–∞“õ. –ö–µ“£–µ—Å—Ç—ñ–∫ “ö–∞–∑–∞“õ—Å—Ç–∞–Ω –º”ô–¥–µ–Ω–∏–µ—Ç—ñ. (1946-1985 –∂—ã–ª–¥–∞—Ä)",
    "27 —Å–∞–±–∞“õ. “ö–∞–∑–∞“õ—Å—Ç–∞–Ω “õ–∞–π—Ç–∞ “õ“±—Ä—É –∫–µ–∑–µ“£—ñ–Ω–¥–µ. (1986 - 1991 –∂—ã–ª–¥–∞—Ä)",
    "28 —Å–∞–±–∞“õ. “ö–∞–∑–∞“õ—Å—Ç–∞–Ω –º–µ–º–ª–µ–∫–µ—Ç—Ç—ñ–ª—ñ–≥—ñ–Ω—ñ“£ “õ–∞–π—Ç–∞ –∂–∞“£“ì—ã—Ä—É—ã . (1991- 1996 –∂—ã–ª–¥–∞—Ä)",
    "29 —Å–∞–±–∞“õ. “ö–∞–∑–∞“õ—Å—Ç–∞–Ω –†–µ—Å–ø—É–±–ª–∏–∫–∞—Å—ã–Ω—ã“£ –¥–∞–º—É—ã. (1997 –∂—ã–ª–¥–∞–Ω –±–∞—Å—Ç–∞–ø “õ–∞–∑—ñ—Ä–≥—ñ –∫“Ø–Ω–≥–µ –¥–µ–π—ñ–Ω)",
    "30 —Å–∞–±–∞“õ. “ö–∞–∑—ñ—Ä–≥—ñ –∑–∞–º–∞–Ω“ì—ã “ö–∞–∑–∞“õ—Å—Ç–∞–Ω –º”ô–¥–µ–Ω–∏–µ—Ç—ñ"
]

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
conn = psycopg2.connect(
    dbname=os.environ.get('DB_NAME', 'bot'),
    user=os.environ.get('DB_USER', 'postgres'),
    password=os.environ.get('DB_PASSWORD', 'admin'),
    host=os.environ.get('DB_HOST', 'localhost'),
    port=os.environ.get('DB_PORT', '5432')
)
cur = conn.cursor()

# –î–æ–±–∞–≤–ª—è—é –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è file_id –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
VIDEO_FILE_ID = None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ file_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def load_video_file_id():
    global VIDEO_FILE_ID
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        cur.execute("SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'settings')")
        table_exists = cur.fetchone()[0]
        
        if not table_exists:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            cur.execute("CREATE TABLE settings (key TEXT PRIMARY KEY, value TEXT)")
            conn.commit()
            logger.info("Created settings table")
        
        # –ü–æ–ª—É—á–∞–µ–º file_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cur.execute("SELECT value FROM settings WHERE key = 'video_file_id'")
        result = cur.fetchone()
        
        if result:
            VIDEO_FILE_ID = result[0]
            logger.info(f"Loaded video file_id from database: {VIDEO_FILE_ID}")
    except Exception as e:
        logger.error(f"Error loading video file_id from database: {e}")
        conn.rollback()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è file_id –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def save_video_file_id(file_id):
    try:
        cur.execute(
            "INSERT INTO settings (key, value) VALUES (%s, %s) ON CONFLICT (key) DO UPDATE SET value = %s",
            ('video_file_id', file_id, file_id)
        )
        conn.commit()
        logger.info(f"Saved video file_id to database: {file_id}")
    except Exception as e:
        logger.error(f"Error saving video file_id to database: {e}")
        conn.rollback()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data='next')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "\"–¢–∞—Ä–∏—Ö—à—ã –ù“±—Ä—Å“±–ª—Ç–∞–Ω\" Telegram –∫–∞–Ω–∞–ª—ã–Ω–∞ “õ–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑! üìö",
        reply_markup=reply_markup,
        protect_content=True
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ"
async def next_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    logger.info(f"Next_step handler called with query.data: {query.data}")
    await query.answer()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
    try:
        with open('photo.png', 'rb') as photo_file:
            await context.bot.send_photo(
                chat_id=query.from_user.id,
                photo=photo_file,
                protect_content=True
            )
    except FileNotFoundError:
        logger.error("Photo file not found: photo.png")
        await context.bot.send_message(
            chat_id=query.from_user.id,
            text="–§–æ—Ç–æ —Ñ–∞–π–ª—ã —Ç–∞–±—ã–ª–º–∞–¥—ã. ”ò–∫—ñ–º—à—ñ–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑.",
            protect_content=True
        )
    except Exception as e:
        logger.error(f"Error sending photo in next_step handler: {e}")
        await context.bot.send_message(
            chat_id=query.from_user.id,
            text="–§–æ—Ç–æ–Ω—ã –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã.",
            protect_content=True
        )
    
    # –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ–± –∞–≤—Ç–æ—Ä–µ —Å –∫–Ω–æ–ø–∫–æ–π "–°—Ç–∞—Ä—Ç"
    keyboard = [[InlineKeyboardButton("–°—Ç–∞—Ä—Ç", callback_data='start')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_message(
        chat_id=query.from_user.id,
        text="–¢”ô–∂–µ–Ω –ù“±—Ä—Å“±–ª—Ç–∞–Ω –®”ô—É—Ç–µ–Ω“±–ª—ã\n"
             "“ö—ã—Ä—ã“õ –∂—ã–ª“ì–∞ –∂—É—ã“õ –µ“£–±–µ–∫ ”©—Ç—ñ–ª—ñ –±–∞—Ä –ü–µ–¥–∞–≥–æ–≥-—à–µ–±–µ—Ä, “ö–† \"–ë—ñ–ª—ñ–º –±–µ—Ä—É —ñ—Å—ñ–Ω—ñ“£ “Ø–∑–¥—ñ–≥—ñ\", "
             "\"–´. –ê–ª—Ç—ã–Ω—Å–∞—Ä–∏–Ω —Ç”©—Å–±–µ–ª–≥—ñ—Å—ñ–Ω—ñ“£\" –∏–µ–≥–µ—Ä—ñ, “ö–∞–∑–∞“õ—Å—Ç–∞–Ω —Ç–∞—Ä–∏—Ö—ã –ø”ô–Ω—ñ –±–æ–π—ã–Ω—à–∞ "
             "–±—ñ—Ä–Ω–µ—à–µ ”ô–¥—ñ—Å—Ç–µ–º–µ–ª—ñ–∫ “õ“±—Ä–∞–ª–¥–∞—Ä–¥—ã“£ –∞–≤—Ç–æ—Ä—ã.",
        reply_markup=reply_markup,
        protect_content=True
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ä—Ç"
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    logger.info(f"Button handler called with query.data: {query.data}")
    await query.answer()
    if query.data == 'start':
        keyboard = [[InlineKeyboardButton("–°–∞–±–∞“õ—Ç–∞—Ä“ì–∞ “õ–æ–ª –∂–µ—Ç–∫—ñ–∑–≥—ñ–º –∫–µ–ª–µ–¥—ñ!", callback_data='get_access')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        global VIDEO_FILE_ID
        video_path = 'video.mp4'  # –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É –≤–∏–¥–µ–æ —Ñ–∞–π–ª—É

        try:
            # –ï—Å–ª–∏ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å file_id –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if VIDEO_FILE_ID:
                logger.info(f"Using cached video file_id: {VIDEO_FILE_ID}")
                await context.bot.send_video(
                    chat_id=query.from_user.id,
                    video=VIDEO_FILE_ID,
                    caption=None,  # –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏
                    reply_markup=reply_markup,
                    read_timeout=120,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
                    write_timeout=120,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
                    connect_timeout=120,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
                    protect_content=True
                )
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –¥–∏—Å–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º file_id –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                with open(video_path, 'rb') as video_file:
                    message = await context.bot.send_video(
                        chat_id=query.from_user.id,
                        video=video_file,
                        caption=None,  # –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏
                        reply_markup=reply_markup,
                        read_timeout=120,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
                        write_timeout=120,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
                        connect_timeout=120,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
                        protect_content=True
                    )
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                    VIDEO_FILE_ID = message.video.file_id
                    logger.info(f"Saved video file_id: {VIDEO_FILE_ID}")
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    save_video_file_id(VIDEO_FILE_ID)
        except FileNotFoundError:
            logger.error(f"Video file not found: {video_path}")
            await context.bot.send_message(
                chat_id=query.from_user.id,
                text="–í–∏–¥–µ–æ —Ñ–∞–π–ª—ã —Ç–∞–±—ã–ª–º–∞–¥—ã. ”ò–∫—ñ–º—à—ñ–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑.",
                reply_markup=reply_markup,
                protect_content=True
            )
        except Exception as e:
            logger.error(f"Error sending video in button handler: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ, –ø–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
            await context.bot.send_message(
                chat_id=query.from_user.id,
                text="–í–∏–¥–µ–æ–Ω—ã –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã. –°—ñ–∑–≥–µ –±”ô—Ä—ñ–±—ñ—Ä –∂–∞–ª“ì–∞—Å—Ç—ã—Ä—É“ì–∞ –º“Ø–º–∫—ñ–Ω–¥—ñ–∫ –±–µ—Ä–µ–º—ñ–∑.",
                reply_markup=reply_markup,
                protect_content=True
            )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–∞–±–∞“õ—Ç–∞—Ä“ì–∞ “õ–æ–ª –∂–µ—Ç–∫—ñ–∑–≥—ñ–º –∫–µ–ª–µ–¥—ñ!"
async def get_access(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    logger.info(f"Get_access handler called with query.data: {query.data}")
    await query.answer()
    if query.data == 'get_access':
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Kaspi Pay
        keyboard = [[InlineKeyboardButton("–¢”©–ª–µ–º –∂–∞—Å–∞—É", url='https://pay.kaspi.kz/pay/2tyi0ezv')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.message.reply_text(
            "üí∞ –ö—É—Ä—Å —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç:\n\n"
            "–ê—É–¥–∏–æ —Å–∞–±–∞“õ—Ç–∞—Ä–¥—ã –ø–∞–π–¥–∞–ª–∞–Ω—É –º–µ—Ä–∑—ñ–º—ñ - 3 –∞–π.\n"
            "–ë–∞“ì–∞—Å—ã - 48 000 —Ç–µ“£–≥–µ.\n"
            "–û—Å—ã —Ç”©–ª–µ–º–¥—ñ —Ç”©–ª–µ–ø, –∫–∞–Ω–∞–ª“ì–∞ “õ–æ—Å—ã–ª—ã“£—ã–∑.\n\n"
            "–ö–∞–Ω–∞–ª“ì–∞ “õ–æ—Å—ã–ª—É —Å—ñ–∑–≥–µ 3 –∞–π –±–æ–π—ã –¢”ô–∂–µ–Ω –ù“±—Ä—Å“±–ª—Ç–∞–Ω–Ω—ã“£ “ö–∞–∑–∞“õ—Å—Ç–∞–Ω —Ç–∞—Ä–∏—Ö—ã –ø”ô–Ω—ñ–Ω–µ–Ω "
            "124 —Ç–∞“õ—ã—Ä—ã–ø—Ç—ã “õ–∞–º—Ç–∏—Ç—ã–Ω –∞–≤—Ç–æ—Ä–ª—ã“õ –∞—É–¥–∏–æ —Å–∞–±–∞“õ—Ç–∞—Ä—ã–Ω —Ç—ã“£–¥–∞—É“ì–∞ –º“Ø–º–∫—ñ–Ω–¥—ñ–∫ –±–µ—Ä–µ–¥—ñ!",
            reply_markup=reply_markup,
            protect_content=True
        )
        # –°–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
        await query.message.reply_text(
            "–ß–µ–∫—Ç—ñ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑ –∂”ô–Ω–µ “õ–æ—Å—ã–ª—É–¥—ã –∫“Ø—Ç—ñ“£—ñ–∑!",
            protect_content=True
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞
async def handle_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    user_name = user.full_name

    try:
        logger.info(f"Inserting/updating user {user_id} ('{user_name}') with status 'pending' in handle_payment.")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        cur.execute(
            "INSERT INTO users (user_id, username, status) VALUES (%s, %s, %s) ON CONFLICT (user_id) DO UPDATE SET username = %s, status = %s",
            (user_id, user_name, 'pending', user_name, 'pending') # Ensure status is pending on conflict too
        )
        conn.commit()
        logger.info(f"User {user_id} ('{user_name}') data saved/updated with status 'pending'.")
    except psycopg2.Error as e:
        logger.error(f"Database error in handle_payment for user {user_id} ('{user_name}'): {e}")
        conn.rollback()
        await update.message.reply_text("–ß–µ–∫—Ç—ñ —Å–∞“õ—Ç–∞—É –∫–µ–∑—ñ–Ω–¥–µ –¥–µ—Ä–µ–∫“õ–æ—Ä “õ–∞—Ç–µ—Å—ñ –æ—Ä—ã–Ω –∞–ª–¥—ã. ”ò–∫—ñ–º—à—ñ–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑.", protect_content=True)
        return
    except Exception as e:
        logger.error(f"Unexpected error in handle_payment (DB part) for user {user_id} ('{user_name}'): {e}")
        await update.message.reply_text("–ß–µ–∫—Ç—ñ ”©“£–¥–µ—É –∫–µ–∑—ñ–Ω–¥–µ –±–µ–ª–≥—ñ—Å—ñ–∑ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã.", protect_content=True)
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    keyboard = [
        [InlineKeyboardButton("–†–∞—Å—Ç–∞—É", callback_data=f'approve_{user_id}'),
         InlineKeyboardButton("“ö–∞–±—ã–ª–¥–∞–º–∞—É", callback_data=f'reject_{user_id}')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –∫–∞–∂–¥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    for admin_user_id in ADMIN_IDS:
        try:
            if update.message.photo:
                await context.bot.send_photo(
                    chat_id=admin_user_id,
                    photo=update.message.photo[-1].file_id,
                    caption=f"–ñ–∞“£–∞ —á–µ–∫: ID: {user_id}, –ê—Ç—ã: {user_name}",
                    reply_markup=reply_markup,
                    protect_content=True
                )
            else: # Assuming text is a link or description of payment
                await context.bot.send_message(
                    chat_id=admin_user_id,
                    text=f"–ñ–∞“£–∞ —á–µ–∫: ID: {user_id}, –ê—Ç—ã: {user_name}\n–ß–µ–∫ –º”ô–ª—ñ–º–µ—Ç—ñ: {update.message.text}",
                    reply_markup=reply_markup,
                    protect_content=True
                )
            logger.info(f"Payment notification sent to admin {admin_user_id} for user {user_id}.")
        except Exception as e_notify:
            logger.error(f"Failed to send payment notification to admin {admin_user_id} for user {user_id}: {e_notify}")
            # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∞–¥–º–∏–Ω–æ–º

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —É—Å–ø–µ—Ö–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤,
    # —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ —á–µ–∫ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î.
    await update.message.reply_text("–ß–µ–∫ “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã! –¢”©–ª–µ–º–¥—ñ —Ä–∞—Å—Ç–∞—É–¥—ã –∫“Ø—Ç—ñ“£—ñ–∑.", protect_content=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.message.from_user.id) not in ADMIN_IDS:
        await update.message.reply_text("–ë“±–ª –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–∫ ”ô–∫—ñ–º—à—ñ–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω.", protect_content=True)
        return

    logger.info("Admin command: Displaying filter buttons.")
    keyboard = [
        [InlineKeyboardButton("–ö“Ø—Ç—É–¥–µ–≥—ñ–ª–µ—Ä (Pending)", callback_data='list_pending')],
        [InlineKeyboardButton("–ú–∞“õ“±–ª–¥–∞–Ω“ì–∞–Ω–¥–∞—Ä (Approved)", callback_data='list_approved')],
        [InlineKeyboardButton("–ë–∞—Å —Ç–∞—Ä—Ç—ã–ª“ì–∞–Ω–¥–∞—Ä (Rejected)", callback_data='list_rejected')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä —Ç—ñ–∑—ñ–º—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑:", reply_markup=reply_markup, protect_content=True)

# –ù–û–í–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Ç–∞—Ç—É—Å—É
async def show_user_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    status_to_fetch = query.data.split('_')[1] # e.g., 'pending', 'approved', 'rejected'

    logger.info(f"Admin action: Fetching users with status '{status_to_fetch}'.")
    
    message_text = f"--- {status_to_fetch.capitalize()} –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä ---"
    no_users_text = f"“ö–∞–∑—ñ—Ä {status_to_fetch} —Å—Ç–∞—Ç—É—Å—ã –±–∞—Ä –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä –∂–æ“õ."
    users_found = False

    try:
        conn.rollback() # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        cur.execute("SELECT user_id, username, expiry_date FROM users WHERE status = %s", (status_to_fetch,))
        users = cur.fetchall()

        if not users:
            logger.info(f"No users found with status '{status_to_fetch}'.")
            await query.edit_message_text(text=f"{message_text}\n{no_users_text}", protect_content=True)
            return

        logger.info(f"Found {len(users)} users with status '{status_to_fetch}'.")
        await query.edit_message_text(text=message_text, protect_content=True) # –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–∏—Å–∫–∞

        for user_id, username, expiry_date in users:
            users_found = True
            user_info = f"{username} (ID: {user_id})"
            action_buttons = []

            if status_to_fetch == 'pending':
                user_info = f"–ö“Ø—Ç—É–¥–µ: {user_info}"
                action_buttons.append(InlineKeyboardButton("–†–∞—Å—Ç–∞—É", callback_data=f'approve_{user_id}'))
                action_buttons.append(InlineKeyboardButton("“ö–∞–±—ã–ª–¥–∞–º–∞—É", callback_data=f'reject_{user_id}'))
            elif status_to_fetch == 'approved':
                expiry_text = expiry_date.strftime('%d.%m.%Y') if expiry_date else "–ë–µ–ª–≥—ñ—Å—ñ–∑"
                user_info = f"–ú–∞“õ“±–ª–¥–∞–Ω“ì–∞–Ω: {user_info} - –ú–µ—Ä–∑—ñ–º—ñ: {expiry_text}"
                action_buttons.append(InlineKeyboardButton("“ö–∞–±—ã–ª–¥–∞–º–∞—É", callback_data=f'reject_{user_id}'))
                action_buttons.append(InlineKeyboardButton("–î–æ—Å—Ç—É–ø—Ç—ã –∞–ª—ã–ø —Ç–∞—Å—Ç–∞—É (Revoke)", callback_data=f'revoke_{user_id}'))
            elif status_to_fetch == 'rejected':
                user_info = f"–ë–∞—Å —Ç–∞—Ä—Ç—ã–ª“ì–∞–Ω: {user_info}"
                action_buttons.append(InlineKeyboardButton("–†–∞—Å—Ç–∞—É", callback_data=f'approve_{user_id}'))
            
            reply_markup = InlineKeyboardMarkup([action_buttons]) if action_buttons else None
            await context.bot.send_message(chat_id=query.from_user.id, text=user_info, reply_markup=reply_markup, protect_content=True)

        if not users_found: # –≠—Ç–æ —É—Å–ª–æ–≤–∏–µ —Ç–µ–ø–µ—Ä—å –∏–∑–±—ã—Ç–æ—á–Ω–æ –∏–∑-–∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ if not users –≤—ã—à–µ, –Ω–æ –æ—Å—Ç–∞–≤–ª—é –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
            await context.bot.send_message(chat_id=query.from_user.id, text=no_users_text, protect_content=True)
            
    except psycopg2.Error as e:
        logger.error(f"Database error in show_user_list (status: {status_to_fetch}): {e}")
        await context.bot.send_message(chat_id=query.from_user.id, text=f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö “õ–∞—Ç–µ—Å—ñ ({status_to_fetch} —Ç—ñ–∑—ñ–º—ñ). ”ò–∫—ñ–º—à—ñ–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑.", protect_content=True)
        conn.rollback()
    except Exception as e:
        logger.error(f"Unexpected error in show_user_list (status: {status_to_fetch}): {e}")
        await context.bot.send_message(chat_id=query.from_user.id, text=f"–ë–µ–ª–≥—ñ—Å—ñ–∑ “õ–∞—Ç–µ ({status_to_fetch} —Ç—ñ–∑—ñ–º—ñ).", protect_content=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∞–ø–ø—Ä—É–≤–∞ –∏ —Ä–µ–¥–∂–µ–∫—Ç–∞
async def handle_admin_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    
    if str(query.from_user.id) not in ADMIN_IDS:
        await query.answer("–ë“±–ª –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–∫ ”ô–∫—ñ–º—à—ñ–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω.", show_alert=True)
        return

    await query.answer()

    action, user_id_str = query.data.split('_')
    user_id = int(user_id_str)
    
    user_name = "–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã"
    try:
        user_chat = await context.bot.get_chat(user_id)
        user_name = user_chat.full_name or user_chat.username or f"ID: {user_id}"
    except Exception as e:
        logger.error(f"Could not get chat for user_id {user_id} in handle_admin_action: {e}")

    try:
        if action == 'approve':
            logger.info(f"Admin action: Approving user {user_id} ('{user_name}')")
            payment_date = datetime.now()
            expiry_date = payment_date + timedelta(days=90)
            cur.execute(
                "UPDATE users SET status = %s, payment_date = %s, expiry_date = %s WHERE user_id = %s",
                ('approved', payment_date, expiry_date, user_id)
            )
            conn.commit()
            logger.info(f"User {user_id} ('{user_name}') approved.")

            keyboard_lessons = []
            for i, title in enumerate(LESSON_TITLES, 1):
                keyboard_lessons.append([InlineKeyboardButton(title, callback_data=f'lesson_{i}')])
            
            reply_markup_lessons = InlineKeyboardMarkup(keyboard_lessons)
            
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚úÖ –¢”©–ª–µ–º —Ä–∞—Å—Ç–∞–ª–¥—ã! –°–∞–±–∞“õ—Ç–∞—Ä“ì–∞ “õ–æ–ª –∂–µ—Ç–∫—ñ–∑—É –∞—à—ã–ª–¥—ã.\n–ú–µ—Ä–∑—ñ–º—ñ: {expiry_date.strftime('%d.%m.%Y')} –¥–µ–π—ñ–Ω.\n–¢”©–º–µ–Ω–¥–µ–≥—ñ —Å–∞–±–∞“õ—Ç–∞—Ä–¥—ã —Ç–∞“£–¥–∞“£—ã–∑:",
                reply_markup=reply_markup_lessons,
                protect_content=True
            )
            confirm_text = f"“ö–æ–ª –∂–µ—Ç–∫—ñ–∑—É {user_name} (ID: {user_id}) “Ø—à—ñ–Ω –∞—à—ã–ª–¥—ã."
            if query.message.caption is not None:
                await query.edit_message_caption(caption=confirm_text, protect_content=True)
            elif query.message.text is not None:
                await query.edit_message_text(text=confirm_text, protect_content=True)
            else: # Fallback or just remove buttons
                await query.edit_message_reply_markup(reply_markup=None)
                logger.info(f"Admin message for user {user_id} (approve) had no text/caption, buttons removed.")

        elif action == 'reject':
            logger.info(f"Admin action: Rejecting user {user_id} ('{user_name}')")
            cur.execute(
                "UPDATE users SET status = %s WHERE user_id = %s",
                ('rejected', user_id)
            )
            conn.commit()
            logger.info(f"User {user_id} ('{user_name}') rejected.")
            
            await context.bot.send_message(
                chat_id=user_id,
                text="‚ùå –¢”©–ª–µ–º —Ä–∞—Å—Ç–∞–ª–º–∞–¥—ã. “ö–∞–π—Ç–∞ —Ç–µ–∫—Å–µ—Ä—ñ–ø, —á–µ–∫—Ç—ñ “õ–∞–π—Ç–∞ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑.",
                protect_content=True
            )
            reject_text = f"“ö–æ–ª –∂–µ—Ç–∫—ñ–∑—É {user_name} (ID: {user_id}) “Ø—à—ñ–Ω –∂–∞–±—ã–ª–¥—ã (–±–∞—Å —Ç–∞—Ä—Ç—ã–ª–¥—ã)."
            if query.message.caption is not None:
                await query.edit_message_caption(caption=reject_text, protect_content=True)
            elif query.message.text is not None:
                await query.edit_message_text(text=reject_text, protect_content=True)
            else: # Fallback or just remove buttons
                await query.edit_message_reply_markup(reply_markup=None)
                logger.info(f"Admin message for user {user_id} (reject) had no text/caption, buttons removed.")

        elif action == 'revoke':
            logger.info(f"Admin action: Revoking access for user {user_id} ('{user_name}')")
            cur.execute(
                "UPDATE users SET status = %s, payment_date = NULL, expiry_date = NULL WHERE user_id = %s",
                ('pending', user_id) # –°—Ç–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å pending, –æ–±–Ω—É–ª—è–µ–º –¥–∞—Ç—ã
            )
            conn.commit()
            logger.info(f"Access revoked for user {user_id} ('{user_name}'). Status set to pending.")
            
            await context.bot.send_message(
                chat_id=user_id,
                text="‚ÑπÔ∏è –°—ñ–∑–¥—ñ“£ –∫—É—Ä—Å“õ–∞ “õ–æ–ª –∂–µ—Ç–∫—ñ–∑—É—ñ“£—ñ–∑ ”ô–∫—ñ–º—à—ñ–º–µ–Ω —Ç–æ“õ—Ç–∞—Ç—ã–ª–¥—ã. “ö–æ—Å—ã–º—à–∞ –∞“õ–ø–∞—Ä–∞—Ç –∞–ª—É “Ø—à—ñ–Ω ”ô–∫—ñ–º—à—ñ–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑.",
                protect_content=True
            )
            revoke_text = f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã {user_name} (ID: {user_id}) “Ø—à—ñ–Ω “õ–æ–ª –∂–µ—Ç–∫—ñ–∑—É —Ç–æ“õ—Ç–∞—Ç—ã–ª–¥—ã. –ï–Ω–¥—ñ –æ–ª –∫“Ø—Ç—É–¥–µ."
            if query.message.caption is not None:
                await query.edit_message_caption(caption=revoke_text, protect_content=True)
            elif query.message.text is not None:
                await query.edit_message_text(text=revoke_text, protect_content=True)
            else:
                await query.edit_message_reply_markup(reply_markup=None)
                logger.info(f"Admin message for user {user_id} (revoke) had no text/caption, buttons removed.")

    except psycopg2.Error as e:
        logger.error(f"Database error in handle_admin_action for user {user_id} ('{user_name}'), action '{action}': {e}")
        conn.rollback()
        try:
            await query.edit_message_text(text=f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö “õ–∞—Ç–µ—Å—ñ ({action}). ”ò–∫—ñ–º—à—ñ–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑.", protect_content=True)
        except:
             await context.bot.send_message(chat_id=query.from_user.id, text=f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö “õ–∞—Ç–µ—Å—ñ ({action}). ”ò–∫—ñ–º—à—ñ–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑.", protect_content=True)
    except Exception as e:
        logger.error(f"Unexpected error in handle_admin_action for user {user_id} ('{user_name}'), action '{action}': {e}")
        try:
            await query.edit_message_text(text=f"–ë–µ–ª–≥—ñ—Å—ñ–∑ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã ({action}).", protect_content=True)
        except:
            await context.bot.send_message(chat_id=query.from_user.id, text=f"–ë–µ–ª–≥—ñ—Å—ñ–∑ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã ({action}).", protect_content=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–∫–∞ (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞)
async def select_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    lesson_id_str = query.data.split('_')[1]
    lesson_index = int(lesson_id_str) - 1 # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø–∏—Å–∫—É LESSON_TITLES

    # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ç–∞–π–º–∞—É—Ç–∞
    await query.answer()

    lesson_title = LESSON_TITLES[lesson_index] if 0 <= lesson_index < len(LESSON_TITLES) else f"–°–∞–±–∞“õ-{lesson_id_str}"

    try:
        conn.rollback() # Ensure fresh transaction state
        cur.execute("SELECT status FROM users WHERE user_id = %s", (user_id,))
        user_status_row = cur.fetchone()

        if not user_status_row or user_status_row[0] != 'approved':
            logger.info(f"User {user_id} tried to access lesson '{lesson_title}' but status is not 'approved'.")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ —á–µ—Ä–µ–∑ query.answer()
            await context.bot.send_message(
                chat_id=user_id,
                text=f"'{lesson_title}' —Ç–∞“£–¥–∞—É“ì–∞ —Ç—ã—Ä—ã—Å—Ç—ã“£—ã–∑, –±—ñ—Ä–∞“õ –∫—É—Ä—Å“õ–∞ “õ–æ–ª –∂–µ—Ç–∫—ñ–∑—É—ñ“£—ñ–∑ –∂–∞–±—ã“õ.",
                protect_content=True
            )
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
                await query.edit_message_reply_markup(reply_markup=None)
            except Exception as e_edit:
                logger.warning(f"Could not edit message for user {user_id} in select_lesson after denied access: {e_edit}")
            return

        logger.info(f"User {user_id} (status: approved) selected lesson '{lesson_title}'.")
        
        lesson_folder_path = os.path.join("lessons", lesson_title)
        logger.info(f"Looking for lesson files in: {lesson_folder_path}")

        if os.path.isdir(lesson_folder_path):
            audio_files = sorted([
                f for f in os.listdir(lesson_folder_path) 
                if os.path.isfile(os.path.join(lesson_folder_path, f)) and 
                   f.lower().endswith(('.mp3', '.m4a', '.ogg', '.wav', '.opus'))
            ])

            if audio_files:
                await context.bot.send_message(chat_id=user_id, text=f"'{lesson_title}' —Å–∞–±–∞“ì—ã–Ω—ã“£ –º–∞—Ç–µ—Ä–∏–∞–ª–¥–∞—Ä—ã –∂—ñ–±–µ—Ä—ñ–ª—É–¥–µ...", protect_content=True) # –ò–∑–º–µ–Ω–µ–Ω–æ —Å query.message.reply_text
                for audio_file_name in audio_files:
                    audio_file_path = os.path.join(lesson_folder_path, audio_file_name)
                    try:
                        logger.info(f"Sending audio: {audio_file_path} to user {user_id}")
                        with open(audio_file_path, 'rb') as audio_fp:
                            await context.bot.send_audio(
                                chat_id=user_id, 
                                audio=audio_fp, 
                                caption=audio_file_name,
                                protect_content=True
                            )
                        logger.info(f"Successfully sent {audio_file_name}")
                    except Exception as e_send_audio:
                        logger.error(f"Failed to send audio file {audio_file_path} to user {user_id}: {e_send_audio}")
                        await context.bot.send_message(chat_id=user_id, text=f"'{audio_file_name}' —Ñ–∞–π–ª—ã–Ω –∂—ñ–±–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã.", protect_content=True)
                await context.bot.send_message(chat_id=user_id, text=f"'{lesson_title}' —Å–∞–±–∞“ì—ã–Ω—ã“£ –±–∞—Ä–ª—ã“õ –º–∞—Ç–µ—Ä–∏–∞–ª–¥–∞—Ä—ã –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ.", protect_content=True)
            else:
                logger.info(f"No audio files found in {lesson_folder_path}.")
                await context.bot.send_message(chat_id=user_id, text=f"'{lesson_title}' —Å–∞–±–∞“ì—ã “Ø—à—ñ–Ω –∞—É–¥–∏–æ –º–∞—Ç–µ—Ä–∏–∞–ª–¥–∞—Ä ”ô–∑—ñ—Ä–≥–µ –∂–æ“õ –Ω–µ–º–µ—Å–µ —Ç–∞–±—ã–ª–º–∞–¥—ã.", protect_content=True) # –ò–∑–º–µ–Ω–µ–Ω–æ —Å query.message.reply_text
        else:
            logger.warning(f"Lesson folder not found: {lesson_folder_path}")
            await context.bot.send_message(chat_id=user_id, text=f"'{lesson_title}' —Å–∞–±–∞“ì—ã–Ω—ã“£ –º–∞—Ç–µ—Ä–∏–∞–ª–¥–∞—Ä—ã —Ç–∞–±—ã–ª–º–∞–¥—ã. ”ò–∫—ñ–º—à—ñ–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑.", protect_content=True) # –ò–∑–º–µ–Ω–µ–Ω–æ —Å query.message.reply_text

    except psycopg2.Error as e:
        logger.error(f"Database error in select_lesson for user {user_id}, lesson '{lesson_title}': {e}")
        # query.answer() —É–∂–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω
        await context.bot.send_message(chat_id=user_id, text="–î–µ—Ä–µ–∫“õ–æ—Ä “õ–∞—Ç–µ—Å—ñ –æ—Ä—ã–Ω –∞–ª–¥—ã. ”ò–∫—ñ–º—à—ñ–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑.", protect_content=True)
        conn.rollback()
    except Exception as e:
        logger.error(f"Unexpected error in select_lesson for user {user_id}, lesson '{lesson_title}': {e}")
        # query.answer() —É–∂–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω
        await context.bot.send_message(chat_id=user_id, text="–ë–µ–ª–≥—ñ—Å—ñ–∑ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã. ”ò–∫—ñ–º—à—ñ–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑.", protect_content=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /approve (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
async def approve(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.message.from_user.id) not in ADMIN_IDS:
        await update.message.reply_text("–ë“±–ª –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–∫ ”ô–∫—ñ–º—à—ñ–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω.", protect_content=True)
        return
    try:
        user_id = int(context.args[0])
        logger.info(f"Legacy /approve command for user_id: {user_id}")
        payment_date = datetime.now()
        expiry_date = payment_date + timedelta(days=90)
        cur.execute(
            "UPDATE users SET status = %s, payment_date = %s, expiry_date = %s WHERE user_id = %s",
            ('approved', payment_date, expiry_date, user_id)
        )
        conn.commit()
        logger.info(f"User {user_id} approved via legacy /approve.")

        keyboard_legacy_lessons = []
        for i, title in enumerate(LESSON_TITLES, 1):
            keyboard_legacy_lessons.append([InlineKeyboardButton(title, callback_data=f'lesson_{i}')])
        
        reply_markup = InlineKeyboardMarkup(keyboard_legacy_lessons)
        
        await context.bot.send_message(
            chat_id=user_id,
            text=f"‚úÖ –¢”©–ª–µ–º —Ä–∞—Å—Ç–∞–ª–¥—ã! –°–∞–±–∞“õ—Ç–∞—Ä“ì–∞ “õ–æ–ª –∂–µ—Ç–∫—ñ–∑—É –∞—à—ã–ª–¥—ã (legacy /approve –∞—Ä“õ—ã–ª—ã).\n–ú–µ—Ä–∑—ñ–º—ñ: {expiry_date.strftime('%d.%m.%Y')} –¥–µ–π—ñ–Ω.\n–¢”©–º–µ–Ω–¥–µ–≥—ñ —Å–∞–±–∞“õ—Ç–∞—Ä–¥—ã —Ç–∞“£–¥–∞“£—ã–∑:",
            reply_markup=reply_markup,
            protect_content=True
        )
        await update.message.reply_text(f"“ö–æ–ª –∂–µ—Ç–∫—ñ–∑—É ID: {user_id} “Ø—à—ñ–Ω –∞—à—ã–ª–¥—ã (legacy /approve).", protect_content=True)
    except (IndexError, ValueError):
        await update.message.reply_text("–ü–∞–π–¥–∞–ª–∞–Ω—É: /approve <user_id>", protect_content=True)
    except psycopg2.Error as e:
        logger.error(f"Database error in legacy /approve for user_id {context.args[0] if context.args else 'N/A'}: {e}")
        conn.rollback()
        await update.message.reply_text("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö “õ–∞—Ç–µ—Å—ñ (/approve). ”ò–∫—ñ–º—à—ñ–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑.", protect_content=True)
    except Exception as e:
        logger.error(f"Unexpected error in legacy /approve for user_id {context.args[0] if context.args else 'N/A'}: {e}")
        await update.message.reply_text("–ë–µ–ª–≥—ñ—Å—ñ–∑ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã (/approve).", protect_content=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reject (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
async def reject(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.message.from_user.id) not in ADMIN_IDS:
        await update.message.reply_text("–ë“±–ª –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–∫ ”ô–∫—ñ–º—à—ñ–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω.", protect_content=True)
        return
    try:
        user_id = int(context.args[0])
        logger.info(f"Legacy /reject command for user_id: {user_id}")
        cur.execute(
            "UPDATE users SET status = %s WHERE user_id = %s",
            ('rejected', user_id)
        )
        conn.commit()
        logger.info(f"User {user_id} rejected via legacy /reject.")

        await context.bot.send_message(
            chat_id=user_id,
            text="‚ùå –¢”©–ª–µ–º —Ä–∞—Å—Ç–∞–ª–º–∞–¥—ã (legacy /reject –∞—Ä“õ—ã–ª—ã). “ö–∞–π—Ç–∞ —Ç–µ–∫—Å–µ—Ä—ñ–ø, —á–µ–∫—Ç—ñ “õ–∞–π—Ç–∞ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑.",
            protect_content=True
        )
        await update.message.reply_text(f"“ö–æ–ª –∂–µ—Ç–∫—ñ–∑—É ID: {user_id} “Ø—à—ñ–Ω –∂–∞–±—ã–ª–¥—ã (legacy /reject).", protect_content=True)
    except (IndexError, ValueError):
        await update.message.reply_text("–ü–∞–π–¥–∞–ª–∞–Ω—É: /reject <user_id>", protect_content=True)
    except psycopg2.Error as e:
        logger.error(f"Database error in legacy /reject for user_id {context.args[0] if context.args else 'N/A'}: {e}")
        conn.rollback()
        await update.message.reply_text("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö “õ–∞—Ç–µ—Å—ñ (/reject). ”ò–∫—ñ–º—à—ñ–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑.", protect_content=True)
    except Exception as e:
        logger.error(f"Unexpected error in legacy /reject for user_id {context.args[0] if context.args else 'N/A'}: {e}")
        await update.message.reply_text("–ë–µ–ª–≥—ñ—Å—ñ–∑ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã (/reject).", protect_content=True)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º file_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        load_video_file_id()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application = Application.builder().token(TOKEN).build()
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(next_step, pattern='next'))
        application.add_handler(CallbackQueryHandler(button, pattern='start'))
        application.add_handler(CallbackQueryHandler(get_access, pattern='get_access'))
        application.add_handler(MessageHandler(filters.PHOTO | filters.TEXT & ~filters.COMMAND, handle_payment))
        application.add_handler(CommandHandler("admin", admin))
        application.add_handler(CallbackQueryHandler(show_user_list, pattern='^list_(pending|approved|rejected)$'))
        application.add_handler(CallbackQueryHandler(handle_admin_action, pattern='^(approve|reject|revoke)_\\d+$'))
        application.add_handler(CallbackQueryHandler(select_lesson, pattern='^lesson_\\d+$'))
        application.add_handler(CommandHandler("approve", approve))
        application.add_handler(CommandHandler("reject", reject))
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)
        
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        cur.close()
        conn.close()
    except Exception as e:
        logger.critical(f"Critical error in main function: {e}")
        raise e

if __name__ == '__main__':
    main()